<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Store_model extends CI_Model {

	private $user_table_name		= "users"; 			// main model table 	
	private $user_device_table		= "user_devices"; 	// device table
	private $user_location_table	= "user_locations"; // user location table
	private $user_setting_table		= "user_settings"; 	// setting table
	private $user_detail_table		= "user_details"; 	// user detail table
	private $follower_table		    = "followers"; 	    // follower table
	private $notification_table		= "notifications"; 	// notification table
	private $store_table			= "stores"; 	    // store table
	private $pet_table				= "pets"; 	    	// pet table
	private $user_badge_table		= "user_badges"; 	// pet table
	
	public function __construct()
	{
		
	}
	
	/**
	* Function to Counting the number of pets
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function record_count($searchStr = NULL) 
	{
                if(isset($searchStr)){
                $this->db->like('storeName', $searchStr,'after');
                
                }
                $this->db->select("{$this->store_table}.storeId,storeScreenName,storeName,storeDescription,storeImage,storeAddress");
                
                $count = $this->db->count_all_results($this->store_table);
                //echo $this->db->last_query();
                return $count;
    }
	
	/**
	* Function to LISTING
	*
	* @author        Shashank
	* @param         var,var
	* @return        array
	*/
    public function all_stores($limit, $start,$searchStr)
	{        
		if(isset($searchStr)){
			$this->db->like('storeName', $searchStr,'after');
			
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("storeName", "asc");
		$this->db->select("{$this->store_table}.storeId,storeScreenName,storeName,storePhone,storeDescription,storeImageThumb,storeImage,storeAddress");                        
		$response = $this->db->get($this->store_table);                
		//echo $this->db->last_query();
		return $response->result_array();
	}
	
	/**
	* Function to add single store for single user
	*
	* @author	Shashank
	* @param	array,var
	* @return	array
	*/	
	public function add_store($param,$Id)
	{
		$fields = array();
		$fields['userId'] = $Id;
		$fields['storeName'] = $param['storeName'];
		$fields['storePhone'] = $param['storePhone'];
		$fields['storeAddress'] = $param['storeAddress'];
		$fields['storeState'] = $param['storeState'];
		$fields['storeCity'] = $param['storeCity'];
		$fields['storeLatitude'] = $param['storeLatitude'];
		$fields['storeLongitude'] = $param['storeLongitude'];
		$fields['storeCountry'] = $param['storeCountry'];
		$fields['createTime'] = date('Y-m-d H:i:s');
		
		if(isset($param['storeDescription'])){
		$fields['storeDescription'] = $param['storeDescription'];
		}
		if(!empty($_FILES['storeImage']['name'])){
				$target_path = STORE_IMAGE_PATH;
                			
				$target_path = $target_path .time().'_' . basename(str_replace(' ', '_',$_FILES['storeImage']['name'])); 
				$img_resp = move_uploaded_file($_FILES['storeImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = STORE_IMAGE_THUMB_PATH.time().str_replace(' ', '_',$_FILES['storeImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['storeImageThumb'] = $target_thumb_path;
						}else{
								$fields['storeImageThumb'] = STORE_IMAGE_THUMB_PATH."default.png";
						}
						$fields['storeImage'] = $target_path;
				}else{
						$fields['storeImage'] = STORE_IMAGE_PATH."default.png";
						$fields['storeImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				$fields['storeImage'] = STORE_IMAGE_PATH."default.png";
				$fields['storeImageThumb'] = STORE_IMAGE_THUMB_PATH."default.png";
		}
		
		$fields['storeScreenName'] = randomToken(12, false, true, false);
			if($this->check_screen_name($fields['storeScreenName'])){
				$fields['storeScreenName'] = $this->getNewScreenName();
			}
		$res_ins = $this->db->insert($this->store_table, $fields);
		//echo $this->db->last_query();
		if($res_ins){
			
			$result['message'] = "success";
			$result['status'] = 200;
	    }else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
	    }

		
		return $result;
	}
	/**
	* Function to generate and check ScreenName in stores table then return unique ScreenName
	*
	* @author	shashank
	* @param	none
	* @return	variable
	*/	
	public function getNewScreenName() 
	{
		$screenName = randomToken(12, false, true, false);
		if($this->check_screen_name($screenName)){
			$this->getNewScreenName();
		}		
		return $screenName;
    }
	
	
	/**
	* Function to check ScreenName in stores table
	*
	* @author	Shashank
	* @param	variable
	* @return	boolean
	*/
    public function check_screen_name($screenName) 
	{
		$flag = FALSE;
    	if (empty($screenName))
		{
			return $flag;
		}	
		$this->db->where('storeScreenName', $screenName);
		if($this->db->count_all_results($this->store_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to get single store
	*
	* @author	Shashank
	* @param	array
	* @return	object array
	*/
	public function get_store($param)
	{
		$this->db->order_by("{$this->store_table}.storeName", "asc");	
		$this->db->select("{$this->store_table}.storeId,storeScreenName,storeName,storePhone,storeDescription,storeImage,storeImageThumb,storeAddress");     
		
		$response = $this->db->get($this->store_table);
		return $response->result();
	}
	
	/**
	* Function to update the store
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_store($param)
	{
		$fields = array();
		$fields1=array();
	   
		
		$fields['storeName'] = $param['storeName'];
		$fields['storePhone'] = $param['storePhone'];
		$fields['storeAddress'] = $param['storeAddress'];
		$fields['storeCity'] = $param['storeCity'];
		$fields['storeState'] = $param['storeState'];
		$fields['storeLatitude'] = $param['storeLatitude'];
		$fields['storeLongitude'] = $param['storeLongitude'];
		$fields['storeCountry'] = $param['storeCountry'];
		$fields['updateTime'] = date('Y-m-d H:i:s');
		if(isset($param['storeDescription'])){
		$fields['storeDescription'] = $param['storeDescription'];
		}
		   if(!empty($_FILES['storeImage']['name'])){
				$target_path = STORE_IMAGE_PATH;
                			
				$target_path = $target_path .time().'_' . basename(str_replace(' ', '_',$_FILES['storeImage']['name'])); 
				$img_resp = move_uploaded_file($_FILES['storeImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = STORE_IMAGE_THUMB_PATH.time().str_replace(' ', '_',$_FILES['storeImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['storeImageThumb'] = $target_thumb_path;
						}else{
								$fields['storeImageThumb'] = STORE_IMAGE_THUMB_PATH."default.png";
						}
						$fields['storeImage'] = $target_path;
				}else{
						$fields['storeImage'] = STORE_IMAGE_PATH."default.png";
						$fields['storeImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				//$fields['petImage'] = PET_IMAGE_PATH."default.png";
				//$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}                
		$res_ins=$this->db->where('storeId',$param['storeId']);
		$res_ins = $this->db->update($this->store_table, $fields);
		if($res_ins){
				$result['storeInfo'] = $this->get_store($fields);
				foreach($result['storeInfo'] as $key=>$value){
						$value->storeImage = base_url().$value->storeImage;
					
				}
				$result['message'] = "success";
				$result['status'] = 200;
		}else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
		}
		return $result;
	}
		/**
	* Function to store detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function store_detail($id)
    {        
        if(isset($id))
        { 
			$this->db->select("{$this->store_table}.storeId,storeScreenName,storeName,storePhone,storeDescription,storeImage,storeImageThumb,storeAddress,storeCity,storeState,storeCountry,storeLatitude,storeLongitude");     
			$this->db->where('storeId',$id);                
			$response = $this->db->get($this->store_table);                
			//echo $this->db->last_query();
			return $response->result_array();
        }
    }
	   
	/**
	* Function to deleting the store
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function store_delete($id)
    {
		return $this->db->delete($this->store_table, array('storeId' => $id));
    }
	
}
	