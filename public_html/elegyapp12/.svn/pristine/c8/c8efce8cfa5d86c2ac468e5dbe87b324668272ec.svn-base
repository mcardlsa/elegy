<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Post_model extends CI_Model {

	private $post_table	= "posts"; 										// main model posts table 
	private $user_table	= "users"; 										// users table 
	private $pet_table	= "pets"; 										// pets table 
	private $pet_type_table	= "pet_types"; 								// pet types table 
	private $star_pet_table	= "star_pets"; 								// star pet table 
	private $hashtag_table	= "hashtags"; 								// hashtag table 
	private $hashtag_post_relation_table	= "hashtag_post_relation"; 	// hashtag post relation table 
	private $tagged_user_post_relation_table	= "tagged_user_post_relation"; 		// user post relation table 
	private $comment_table	= "comments"; 								// comment table 			  
	private $user_device_table		= "user_devices"; 	// device table
	private $user_location_table	= "user_locations"; // user location table
	private $message_table	= "messages"; // message table
	private $notification_table		= "notifications"; 	// notification table
	
	
	
	public function __construct()
	{
		$this->load->model('User_model');
		$this->load->model('Pet_model');
		$this->load->model('Product_model');
	}
	
	/**
	* Function to get all posts
	*
	* @author	KS
	* @param	array
	* @return	object array
	*/
	public function get_all_posts($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}

		$sql = "";
		$sql = "SELECT `posts`.`postId`, `posts`.`petId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,postCreateTime, `pets`.`petTypeId`, `petName`,`petScreenName`, `petImage`, `petImageThumb`, `aboutPet`, `pet_types`.`petType`, `users`.`userId`, `screenName`
		FROM posts
		JOIN users ON (users.userId = posts.userId and users.isBlocked=0)
		JOIN pets ON (pets.petId = posts.petId)
		JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
		where posts.userId='".$param['userId']."'
      	 
		union 
		SELECT `posts`.`postId`, `posts`.`petId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,postCreateTime, `pets`.`petTypeId`, `petName`,`petScreenName`, `petImage`, `petImageThumb`, `aboutPet`, `pet_types`.`petType`, `users`.`userId`, `screenName`
		FROM posts
		JOIN users ON (users.userId = posts.userId and users.isBlocked=0)
		JOIN pets ON (pets.petId = posts.petId)
		JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
		JOIN tagged_user_post_relation ON (tagged_user_post_relation.postId = posts.postId)
		where tagged_user_post_relation.taggedUserId='".$param['userId']."' 
		union 
		SELECT `posts`.`postId`, `posts`.`petId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,postCreateTime, `pets`.`petTypeId`, `petName`,`petScreenName`, `petImage`, `petImageThumb`, `aboutPet`, `pet_types`.`petType`, `users`.`userId`, `screenName`
		FROM posts
		JOIN users ON (users.userId = posts.userId and users.isBlocked=0)
		JOIN pets ON (pets.petId = posts.petId)
		JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
		JOIN followers ON (followers.followingId = ".$param['userId']." and followers.followerId = posts.userId) order by postCreateTime desc limit ".$page.",".$pageSize;
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		if($response->num_rows() > 0){
			$result['posts'] = $response->result();
			foreach($result['posts'] as $key=>$value){
				$value->starCount = $this->count_stars_by_postid($value->postId);
				$value->commentCount = $this->comments_count_by_postid($value->postId);
				$value->imageUrl = base_url().$value->imageUrl;
				$value->imageThumbUrl = base_url().$value->imageThumbUrl;
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
				$value->createTimeString = time_elapsed_string($value->postCreateTime);
				$fields = array();
				$fields['postId'] = $value->postId;
				$fields['userId'] = $value->userId;
				$fields['petId'] = $value->petId;
				$fields['starByUserId'] = $param['userId'];
				$value->starMarkedFlag = $this->check_star_already_added($fields); 
				$fields['page_index'] = 0;
				$fields['page_size'] = 2;
				$commentList = $this->comment_listing($fields); 
				if(!empty($commentList['commentList'])){
				$value->commentList = $commentList['commentList'];
				}else{
					$value->commentList = array();
				}
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No post found.";
			$result['status'] = 202;
		}
	    
		return $result;
	}
	
	/**
	* Function to get posts on hash tag basis
	*
	* @author	KS
	* @param	array
	* @return	object array
	*/
	public function get_hashtag_posts($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		if($this->check_hashtag_name($param['hashTagSearch'])){
			$this->db->where("{$this->hashtag_table}.hashtagName",$param['hashTagSearch']);
			$response = $this->db->get($this->hashtag_table);
			$hashtagId = $response->row()->hashtagId;
		
			$sql = "";
			$sql = "SELECT `posts`.`postId`, `posts`.`petId`, `imageUrl`, `imageThumbUrl`, `imageType`, 	`description`,postCreateTime, `pets`.`petTypeId`, `petName`,`petScreenName`, `petImage`, `petImageThumb`, `aboutPet`, `pet_types`.`petType`, `users`.`userId`, `screenName`
			FROM posts
			JOIN users ON (users.userId = posts.userId)
			JOIN pets ON (pets.petId = posts.petId)
			JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
			JOIN hashtag_post_relation ON (posts.postId = hashtag_post_relation.postId)
			WHERE hashtag_post_relation.hashtagId = '".$hashtagId."'
			ORDER BY postCreateTime DESC
			LIMIT ".$page.",".$pageSize;
			$response = $this->db->query($sql);
			//echo $this->db->last_query();
			if($response->num_rows() > 0){
				$result['posts'] = $response->result();
				foreach($result['posts'] as $key=>$value){
					$value->starCount = $this->count_stars_by_postid($value->postId);
					$value->commentCount = $this->comments_count_by_postid($value->postId);
					$value->imageUrl = base_url().$value->imageUrl;
					$value->imageThumbUrl = base_url().$value->imageThumbUrl;
					$value->petImage = base_url().$value->petImage;
					$value->petImageThumb = base_url().$value->petImageThumb;
					$value->createTimeString = time_elapsed_string($value->postCreateTime);
					$fields = array();
					$fields['postId'] = $value->postId;
					$fields['userId'] = $value->userId;
					$fields['petId'] = $value->petId;
					$fields['starByUserId'] = $param['userId'];
					$value->starMarkedFlag = $this->check_star_already_added($fields); 					
					$fields['page_index'] = 0;
					$fields['page_size'] = 2;
					$commentList = $this->comment_listing($fields); 
					if(!empty($commentList['commentList'])){
						$value->commentList = $commentList['commentList'];
					}else{
						$value->commentList = array();
					}
				}
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "No post found.";
				$result['status'] = 202;
			}
	    }else{
			$result['message'] = "No hashtag found.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to get user posts
	*
	* @author	KS
	* @param	array
	* @return	object array
	*/
	public function get_user_posts($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}

		$sql = "";
		$sql = "SELECT `posts`.`postId`, `posts`.`petId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,postCreateTime, `pets`.`petTypeId`, `petName`,`petScreenName`, `petImage`, `petImageThumb`, `aboutPet`, `pet_types`.`petType`, `users`.`userId`, `screenName`
		FROM posts
		JOIN users ON (users.userId = posts.userId)
		JOIN pets ON (pets.petId = posts.petId)
		JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
		where posts.petId='".$param['petId']."'  and posts.userId='".$param['userId']."'
		order by postCreateTime desc limit ".$page.",".$pageSize;
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		if($response->num_rows() > 0){
			$result['posts'] = $response->result();
			foreach($result['posts'] as $key=>$value){
				$value->starCount = $this->count_stars_by_postid($value->postId);
				$value->commentCount = $this->comments_count_by_postid($value->postId);
				$value->imageUrl = base_url().$value->imageUrl;
				$value->imageThumbUrl = base_url().$value->imageThumbUrl;
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
				$value->createTimeString = time_elapsed_string($value->postCreateTime);
				$fields = array();
				$fields['postId'] = $value->postId;
				$fields['userId'] = $value->userId;
				$fields['petId'] = $value->petId;
				$fields['starByUserId'] = $param['userId'];
				$value->starMarkedFlag = $this->check_star_already_added($fields); 
				$fields['page_index'] = 0;
				$fields['page_size'] = 2;
				$commentList = $this->comment_listing($fields); 
				if(!empty($commentList['commentList'])){
				$value->commentList = $commentList['commentList'];
				}else{
					$value->commentList = array();
				}
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No post found.";
			$result['status'] = 202;
		}
	    
		return $result;
	}
	
	/**
	* Function to add single post
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function add_post($param)
	{		
		$fields = array();
		$fields['userId'] = $param['userId'];
		$fields['petId'] =$param['petId'];
		$fields['description'] = $param['description'];
		$fields['imageType'] = $param['imageType'];
		$fields['postCreateTime'] = date('Y-m-d H:i:s');
		
		if(!empty($_FILES['imageUrl']['name'])){
			$target_path = POST_IMAGE_PATH;
			$target_path = $target_path .time().'_' . basename( $_FILES['imageUrl']['name']); 
			$img_resp = move_uploaded_file($_FILES['imageUrl']['tmp_name'], $target_path);
			if($img_resp){
				$target_thumb_path = POST_IMAGE_THUMB_PATH.time().$_FILES['imageUrl']['name'];
				if($fields['imageType'] == "image")
				{					
					createThumbs($target_path,$target_thumb_path,100);
					if(file_exists($target_thumb_path)){
						$fields['imageThumbUrl'] = $target_thumb_path;
					}else{
						$fields['imageThumbUrl'] = POST_IMAGE_THUMB_PATH."default.png";
					}
				}
				elseif($fields['imageType'] == "video")
				{
					//$ffmpeg - path of ffmpeg in server defined in config/constant.php file
					$ffmpeg = FFMPEG_PATH;
					$interval = 1; // At what time the screenshot to be taken after video is started 
					$size = '300x300'; // dimension of the image 
					$target_thumb_path2 = $target_thumb_path.".jpg";
					$cmd = "$ffmpeg -i $target_path -deinterlace -an -ss $interval -f mjpeg -vf transpose=1 -r 1 -y -s $size $target_thumb_path2 2>&1"; 
					//$ffmpeg -i $video -deinterlace -an -ss $interval -f mjpeg -vf transpose=1 -r 1 -y -s $size $image 2>&1
					shell_exec($cmd);
					if(file_exists($target_thumb_path2)){
						$fields['imageThumbUrl'] = $target_thumb_path2;
					}else{					
						$fields['imageThumbUrl'] = POST_IMAGE_THUMB_PATH."default.png";
					}
				}
				else
				{
					$fields['imageThumbUrl'] = POST_IMAGE_THUMB_PATH."default.png";
				}
				$fields['imageUrl'] = $target_path;
			}else{
				$fields['imageUrl'] = POST_IMAGE_PATH."default.png";
				$fields['imageThumbUrl'] = POST_IMAGE_THUMB_PATH."default.png";
			}
		}else{
			$fields['imageUrl'] = POST_IMAGE_PATH."default.png";
			$fields['imageThumbUrl'] = POST_IMAGE_THUMB_PATH."default.png";
		}		
		
		if($img_resp)
		{
			$res_ins = $this->db->insert($this->post_table, $fields);
			if($res_ins){			
				$last_insert_post_id = $this->db->insert_id();
				
				//------------------------------------------------------------------------------
				// // // // //set hashtag relation here
				// // // // $hash_content = preg_match_all("/(?<=\#)(.*?)(?=\b)/", $param['description'], $hashes);
				// // // // $hash_response = $hashes[0];
				// // // // //$hash_response = get_particular_tags($param['description'],'#');
				// // // // $hashtagId = "";
				// // // // foreach($hash_response as $key=>$value)
				// // // // {
					// // // // if(!empty($value)){
						// // // // if($this->check_hashtag_name($value)){
							// // // // $this->db->where("{$this->hashtag_table}.hashtagName",$value);
							// // // // $response = $this->db->get($this->hashtag_table);
							// // // // $hashtagId = $response->row()->hashtagId;
						// // // // }else{
							// // // // $hashTagFields = array();
							// // // // $hashTagFields['hashtagName'] = $value;
							// // // // $this->db->insert($this->hashtag_table, $hashTagFields);
							// // // // $hashtagId = $this->db->insert_id();
						// // // // }
						// // // // $hashTagPostRelationFields = array();
						// // // // $hashTagPostRelationFields['hashtagId'] = $hashtagId;
						// // // // $hashTagPostRelationFields['postId'] = $last_insert_post_id;
						// // // // $this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);	
					// // // // }					
				// // // // }
				
				// // // // //set user post relation here----------------
				// // // // $hash_content = preg_match_all("/(?<=\@)(.*?)(?=\b)/", $param['description'], $hashes);
				// // // // $hash_response = $hashes[0];
				// // // // //$hash_response = get_particular_tags($param['description'],'@');
				// // // // $hashtagId = "";
				// // // // foreach($hash_response as $key=>$value)
				// // // // {
					// // // // if(!empty($value)){					
						// // // // $userPostRelationFields = array();
						// // // // $userPostRelationFields['taggedUserId'] = $this->User_model->get_user_id_by_screenName($value);
						// // // // $userPostRelationFields['postId'] = $last_insert_post_id;
						// // // // if($userPostRelationFields['taggedUserId']){
							// // // // $this->db->insert($this->tagged_user_post_relation_table, $userPostRelationFields);	
							// // // // //send notification
							// // // // if($userPostRelationFields['taggedUserId'] != $param['userId'])
							// // // // {
							
								// // // // $fields = array();
								// // // // $userResults = array();				
								// // // // $fields['userId'] = $param['userId'];	
								// // // // $fields['petId'] = $param['petId'];					
								// // // // $userResults = $this->User_model->get_user_detail($fields);
								// // // // $activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
								// // // // $param['notifiedByUserName'] = $userResults->screenName;
								// // // // $param['notificationText'] = 'mentioned you in a comment:"'.$param['description'].'"';
								// // // // $sql_ins = "";
								// // // // $sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_post_id."',userId='".$userPostRelationFields['taggedUserId']."',notifiedByUserId='".$param['userId']."',notifiedByPetId='".$param['petId']."',notificationType='2',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."'";			
								// // // // $res2 = $this->db->query($sql_ins);
								// // // // $fields = array();
								// // // // $fields['userId'] = $userPostRelationFields['taggedUserId'];
								// // // // $badgeResult = $this->User_model->add_user_badge($fields);
							
							// // // // }
							// // // // //-----------------
						// // // // }
					// // // // }					
				// // // // }
				// // // // //-----------------------------
				//------------------------------------------------------------------------------
				
				// to make the entry of user mentions
				if(isset($param['userMention']))
				{
					foreach($param['userMention'] as $key=>$val)
					{
						if($val == 0)
						{
								continue;
						}
						$sql_mention = "INSERT INTO ".$this->tagged_user_post_relation_table." SET postId='$last_insert_post_id',taggedUserId='$val',tuprCreateTime='".date('Y-m-d H:i:s')."'";
						$res_mention = $this->db->query($sql_mention);
						//send notification--------
						if($val != $param['userId'])
						{				
							$fields = array();
							$userResults = array();				
							$fields['userId'] = $param['userId'];	
							$fields['petId'] = $param['petId'];					
							$userResults = $this->User_model->get_user_detail($fields);
							$activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
							$param['notifiedByUserName'] = $userResults->screenName;
							$param['notificationText'] = 'mentioned you in a post:"'.$param['description'].'"';
							$sql_ins = "";
							$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_post_id."',userId='".$val."',notifiedByUserId='".$param['userId']."',notifiedByPetId='".$param['petId']."',notificationType='2',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
							$res2 = $this->db->query($sql_ins);
							$fields = array();
							$fields['userId'] = $val;
							$badgeResult = $this->User_model->add_user_badge($fields);	
							//--------------send ios push notification-------------------
							$fields = array();							
							$fields['userId'] = $val;
							$userDetail = $this->User_model->get_user_detail($fields);
							if($userDetail->hashtagNotification)
							{						
								$fields = array();
								$sendNotificationParam = array();
								$fields['userId'] = $val;
								$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
								//pr($deviceResult);die;
								if(!empty($deviceResult->deviceToken))
								{
									if(strtolower($deviceResult->deviceType) == 'ios')
									{
										$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
										$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
										$sendNotificationParam['message'] = $activePetInfo->petName." ".$param['notificationText'];
										$sendNotificationParam['objectId'] = $last_insert_post_id;
										$sendNotificationParam['notificationType'] = 2;
										push_notification_ios($sendNotificationParam);
									}
								}
							}
							//--------------send ios push notification end-------------------	
						}
						//------------------------
					}
				}
				
				// to make the entry of hashtags
				if(isset($param['oldHashtag']))
				{
					foreach($param['oldHashtag'] as $key=>$val)
					{
						$hashTagPostRelationFields = array();
						$hashTagPostRelationFields['hashtagId'] = $val;
						$hashTagPostRelationFields['postId'] = $last_insert_post_id;
						$hashTagPostRelationFields['hprCreateTime'] = date('Y-m-d H:i:s');
						$this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);
					}
				}
				
				// to make the entry of new hashtags
				if(isset($param['newHashtag']))
				{
					foreach($param['newHashtag'] as $key=>$val)
					{
						$sql_chk_hashtag = "SELECT * FROM ".$this->hashtag_table." WHERE hashtagName='$val'";
						$res_chk_hashtag = $this->db->query($sql_chk_hashtag);
						if($res_chk_hashtag->num_rows() > 0)
						{
							$row_chk_hashtag = $res_chk_hashtag->result();
							$ht_id = $row_chk_hashtag[0]->hashtagId;
						}
						else
						{
							$hashTagFields = array();
							$hashTagFields['hashtagName'] = $val;
							$hashTagFields['hashtagCreateTime'] = date('Y-m-d H:i:s');					
							$this->db->insert($this->hashtag_table, $hashTagFields);
							$ht_id = $this->db->insert_id();
						}				
						$hashTagPostRelationFields = array();
						$hashTagPostRelationFields['hashtagId'] = $ht_id;
						$hashTagPostRelationFields['postId'] = $last_insert_post_id;
						$hashTagPostRelationFields['hprCreateTime'] = date('Y-m-d H:i:s');
						$this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);
					}
				}
				
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to check hashtag available or not
	*
	* @author	KS
	* @param	variable
	* @return	boolean
	*/
    public function check_hashtag_name($hashtagName) 
	{
		$flag = FALSE;
		$this->db->where('hashtagName', $hashtagName);
		if($this->db->count_all_results($this->hashtag_table) > 0){
			$flag = TRUE;
		}else{
			$flag = FALSE;
		}
		return $flag;
    }
	
	/**
	* Function to count stars of a post
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function count_stars_by_postid($postId) 
	{
		$this->db->where('postId', $postId);
		$star_count = $this->db->count_all_results($this->star_pet_table);	
		if(empty($star_count)){
			$star_count = 0;
		}
		return $star_count;
    }
	
	/**
	* Function to count total comments on a post
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function comments_count_by_postid($postId) 
	{
		$flag = FALSE;
		$this->db->where('postId', $postId);
		$starCounts = $this->db->count_all_results($this->comment_table);
		return $starCounts;
    }
	
	/**
	* Function to add star to pet
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_star($param)
	{
		if($this->check_star_already_added($param))
		{
			$this->db->where('postId', $param['postId']);
			$this->db->where('userId', $param['userId']);
			$this->db->where('petId', $param['petId']);
			$this->db->where('starByUserId', $param['starByUserId']);
			$this->db->where('starByPetId', $param['starByPetId']);
			$res = $this->db->delete($this->star_pet_table);
			if($res){
				$result['message'] = "Star unmarked successfully.";
				$result['starsCount'] = $this->stars_count_by_postid($param); 
				$result['starMarkedFlag'] = false;
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}
		else
		{	
			$fields = array();
			$fields['postId'] = $param['postId'];
			$fields['userId'] = $param['userId'];
			$fields['petId'] = $param['petId'];
			$fields['starByUserId'] = $param['starByUserId'];
			$fields['starByPetId'] = $param['starByPetId'];
			$fields['starPetCreateTime'] = date('Y-m-d H:i:s');
			$res_ins = $this->db->insert($this->star_pet_table, $fields);
			if($res_ins)
			{
				//send notification
				if($param['starByUserId'] != $param['userId'])
				{				
					$fields = array();
					$userResults = array();
					$fields['userId'] = $param['starByUserId'];	
					$fields['petId'] = $param['starByPetId'];					
					$userResults = $this->User_model->get_user_detail($fields);
					$petResults = $this->Pet_model->get_pet_profile($fields);
					$param['notifiedByPetScreenName'] = $petResults['petProfile']->petScreenName;
					$param['notifiedByPetName'] = $petResults['petProfile']->petName;
					$param['notifiedByUserName'] = $userResults->screenName;
					$param['notificationText'] = 'gave you a star';
					$sql_ins = "";
					$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$param['postId']."',userId='".$param['userId']."',petId='".$param['petId']."',notifiedByUserId='".$param['starByUserId']."',notifiedByPetId='".$param['starByPetId']."',notificationType='1',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$param['notifiedByPetScreenName']."',notifiedByPetName='".$param['notifiedByPetName']."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";					
					$res2 = $this->db->query($sql_ins);
					$badgeResult = $this->User_model->add_user_badge($param);
					//--------------send ios push notification-------------------	
					$userDetail = $this->User_model->get_user_detail($param);
					if($userDetail->starNotification)
					{					
						$fields = array();
						$sendNotificationParam = array();
						$fields['userId'] = $param['userId'];
						$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
						//pr($deviceResult);die;
						if(!empty($deviceResult->deviceToken))
						{
							if(strtolower($deviceResult->deviceType) == 'ios')
							{
								$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
								$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
								$sendNotificationParam['message'] = $param['notifiedByPetName']." ".$param['notificationText'];
								$sendNotificationParam['objectId'] = $param['postId'];
								$sendNotificationParam['notificationType'] = 1;
								push_notification_ios($sendNotificationParam);
							}
						}
					}
					//--------------send ios push notification end-------------------
				}
				//-----------------
				$result['message'] = "Star marked successfully.";
				$result['starsCount'] = $this->stars_count_by_postid($param); 
				$result['starMarkedFlag'] = true;
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}			
		}
		return $result;
	}

	/**
	* Function to add comment to post
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_comment($param)
	{		
		$fields = array();
		$fields['postId'] = $param['postId'];
		$fields['userId'] = $param['userId'];
		$fields['petId'] = $param['petId'];
		$fields['comment'] = $param['comment'];
		$fields['commentCreateTime'] = date('Y-m-d H:i:s');
		
		$res_ins = $this->db->insert($this->comment_table, $fields);
		if($res_ins){
			$last_insert_post_id = $param['postId'];
			
			//-----------------------------------------------------------------------------------
			//set hashtag relation here
			// // // // $hash_content = preg_match_all("/(?<=\#)(.*?)(?=\b)/", $param['comment'], $hashes);
			// // // // $hash_response = $hashes[0];
			// // // // //$hash_response = get_particular_tags($param['comment'],'#');
			// // // // $hashtagId = "";
			// // // // foreach($hash_response as $key=>$value)
			// // // // {
				// // // // if(!empty($value)){
					// // // // if($this->check_hashtag_name($value)){
						// // // // $this->db->where("{$this->hashtag_table}.hashtagName",$value);
						// // // // $response = $this->db->get($this->hashtag_table);
						// // // // $hashtagId = $response->row()->hashtagId;
					// // // // }else{
						// // // // $hashTagFields = array();
						// // // // $hashTagFields['hashtagName'] = $value;
						// // // // $this->db->insert($this->hashtag_table, $hashTagFields);
						// // // // $hashtagId = $this->db->insert_id();
					// // // // }
					// // // // $hashTagPostRelationFields = array();
					// // // // $hashTagPostRelationFields['hashtagId'] = $hashtagId;
					// // // // $hashTagPostRelationFields['postId'] = $last_insert_post_id;
					// // // // $this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);	
				// // // // }					
			// // // // }
			
			// // // // //set user post relation here
			// // // // $hash_content = preg_match_all("/(?<=\@)(.*?)(?=\s)/", $param['comment'], $hashes);
			// // // // $hash_response = $hashes[0];
			// // // // //$hash_response = get_particular_tags($param['comment'],'@');
			// // // // $hashtagId = "";
			// // // // foreach($hash_response as $key=>$value)
			// // // // {
				// // // // if(!empty($value)){					
					
					// // // // $userPostRelationFields = array();
					// // // // $userPostRelationFields['taggedUserId'] = $this->User_model->get_user_id_by_screenName($value);
					// // // // $userPostRelationFields['postId'] = $last_insert_post_id;
					// // // // if(!empty($userPostRelationFields['taggedUserId'])){
						// // // // $this->db->insert($this->tagged_user_post_relation_table, $userPostRelationFields);
						// // // // //send notification
						// // // // if($userPostRelationFields['taggedUserId'] != $param['userId'])
						// // // // {
						
							// // // // $fields = array();
							// // // // $userResults = array();				
							// // // // $fields['userId'] = $param['userId'];	
							// // // // $fields['petId'] = $param['petId'];					
							// // // // $userResults = $this->User_model->get_user_detail($fields);
							// // // // $activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
							// // // // $param['notifiedByUserName'] = $userResults->screenName;
							// // // // $param['notificationText'] = 'mentioned you in a comment:"'.$param['comment'].'"';
							// // // // $sql_ins = "";
							// // // // $sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$param['postId']."',userId='".$userPostRelationFields['taggedUserId']."',notifiedByUserId='".$param['userId']."',notifiedByPetId='".$param['petId']."',notificationType='2',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."'";			
							// // // // $res2 = $this->db->query($sql_ins);
							// // // // $fields = array();
							// // // // $fields['userId'] = $userPostRelationFields['taggedUserId'];
							// // // // $badgeResult = $this->User_model->add_user_badge($fields);
						
						// // // // }
						// // // // //-----------------
					// // // // }
				// // // // }					
			// // // // }		
			//-----------------------------------------------------------------------------------
			
			// to make the entry of user mentions
			if(isset($param['userMention']))
			{
				foreach($param['userMention'] as $key=>$val)
				{
					if($val == 0)
					{
							continue;
					}
					$sql_mention = "INSERT INTO ".$this->tagged_user_post_relation_table." SET postId='$last_insert_post_id',taggedUserId='$val'";
					$res_mention = $this->db->query($sql_mention);
					//send notification
					if($val != $param['userId'])
					{
					
						$fields = array();
						$userResults = array();				
						$fields['userId'] = $param['userId'];	
						$fields['petId'] = $param['petId'];					
						$userResults = $this->User_model->get_user_detail($fields);
						$activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
						$param['notifiedByUserName'] = $userResults->screenName;
						$param['notificationText'] = 'mentioned you in a comment:"'.$param['comment'].'"';
						$sql_ins = "";
						$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$param['postId']."',userId='".$val."',notifiedByUserId='".$param['userId']."',notifiedByPetId='".$param['petId']."',notificationType='2',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
						$res2 = $this->db->query($sql_ins);
						$fields = array();
						$fields['userId'] = $val;
						$badgeResult = $this->User_model->add_user_badge($fields);
						//--------------send ios push notification-------------------
						$fields = array();							
						$fields['userId'] = $val;
						$userDetail = $this->User_model->get_user_detail($fields);
						if($userDetail->hashtagNotification)
						{							
							$fields = array();
							$sendNotificationParam = array();
							$fields['userId'] = $val;
							$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
							//pr($deviceResult);die;
							if(!empty($deviceResult->deviceToken))
							{
								if(strtolower($deviceResult->deviceType) == 'ios')
								{
									$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
									$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
									$sendNotificationParam['message'] = $activePetInfo->petName." ".$param['notificationText'];
									$sendNotificationParam['objectId'] = $param['postId'];
									$sendNotificationParam['notificationType'] = 2;
									push_notification_ios($sendNotificationParam);
								}
							}
						}
						//--------------send ios push notification end-------------------	
					}
					//-----------------
				}
			}
			
			// to make the entry of hashtags
			if(isset($param['oldHashtag']))
			{
				foreach($param['oldHashtag'] as $key=>$val)
				{
					$hashTagPostRelationFields = array();
					$hashTagPostRelationFields['hashtagId'] = $val;
					$hashTagPostRelationFields['postId'] = $last_insert_post_id;
					$hashTagPostRelationFields['hprCreateTime'] = date('Y-m-d H:i:s');
					$this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);
				}
			}
			
			// to make the entry of new hashtags
			if(isset($param['newHashtag']))
			{
				foreach($param['newHashtag'] as $key=>$val)
				{
					$sql_chk_hashtag = "SELECT * FROM ".$this->hashtag_table." WHERE hashtagName='$val'";
					$res_chk_hashtag = $this->db->query($sql_chk_hashtag);
					if($res_chk_hashtag->num_rows() > 0)
					{
						$row_chk_hashtag = $res_chk_hashtag->result();
						$ht_id = $row_chk_hashtag[0]->hashtagId;
					}
					else
					{
						$hashTagFields = array();
						$hashTagFields['hashtagName'] = $val;
						$hashTagFields['hashtagCreateTime'] = date('Y-m-d H:i:s');
						$this->db->insert($this->hashtag_table, $hashTagFields);
						$ht_id = $this->db->insert_id();
					}				
					$hashTagPostRelationFields = array();
					$hashTagPostRelationFields['hashtagId'] = $ht_id;
					$hashTagPostRelationFields['postId'] = $last_insert_post_id;
					$hashTagPostRelationFields['hprCreateTime'] = date('Y-m-d H:i:s');
					$this->db->insert($this->hashtag_post_relation_table, $hashTagPostRelationFields);
				}
			}
			
			//send notification to user who having this particular post
			$postUserId = $this->get_userid_by_postid($param['postId']);
			if(!empty($postUserId))
			{
				if($postUserId != $param['userId'])
				{
				
					$fields = array();
					$userResults = array();				
					$fields['userId'] = $param['userId'];	
					$fields['petId'] = $param['petId'];					
					$userResults = $this->User_model->get_user_detail($fields);
					$activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
					$param['notifiedByUserName'] = $userResults->screenName;
					$param['notificationText'] = 'commented on your post';
					$sql_ins = "";
					$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$param['postId']."',userId='".$postUserId."',notifiedByUserId='".$param['userId']."',notifiedByPetId='".$param['petId']."',notificationType='2',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
					$res2 = $this->db->query($sql_ins);
					$fields = array();
					$fields['userId'] = $postUserId;
					$badgeResult = $this->User_model->add_user_badge($fields);
					//--------------send ios push notification-------------------
					$fields = array();							
					$fields['userId'] = $postUserId;
					$userDetail = $this->User_model->get_user_detail($fields);
					if($userDetail->hashtagNotification)
					{						
						$fields = array();
						$sendNotificationParam = array();
						$fields['userId'] = $postUserId;
						$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
						//pr($deviceResult);die;
						if(!empty($deviceResult->deviceToken))
						{
							if(strtolower($deviceResult->deviceType) == 'ios')
							{
								$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
								$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
								$sendNotificationParam['message'] = $activePetInfo->petName." ".$param['notificationText'];
								$sendNotificationParam['objectId'] = $param['postId'];
								$sendNotificationParam['notificationType'] = 2;
								push_notification_ios($sendNotificationParam);
							}
						}
					}
					//--------------send ios push notification end-------------------	
				}
			}
			//-----------------
			
			$param['page_index'] = 0;
			$param['page_size'] = 20;
			$commentList = $this->comment_listing($param);
			if(empty($commentList['commentList'])){
				$commentList['commentList'] = array();
			}
			$result['commentList'] = $commentList['commentList'];
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to comments listing for single post
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function comment_listing($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		$sql = "";
		$sql = "SELECT comments.commentId, comment, commentCreateTime, comments.userId, pets.petName, petScreenName, petImage, petImageThumb, aboutPet, pet_types.petType
					FROM (comments)
					JOIN pets ON (pets.petId = comments.petId)
					JOIN users ON (comments.userId = users.userId and users.isBlocked = '0')
					JOIN pet_types ON (pet_types.petTypeId = pets.petTypeId)
					WHERE comments.postId =  '".$param['postId']."'
					ORDER BY comments.commentId desc, commentCreateTime ASC LIMIT ".$page.",".$pageSize."";
				
		$response = $this->db->query($sql);
		if($response->num_rows()>0){
			$result['commentList'] = $response->result();
			foreach($result['commentList'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No comment found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to show post detail
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function post_detail($param)
	{
		$this->db->select("{$this->post_table}.*,{$this->pet_table}.*,{$this->pet_type_table}.petType");		
		$this->db->join($this->pet_table,"{$this->pet_table}.petId = .". $this->post_table.'.petId');
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');		
		$this->db->where("{$this->post_table}.postId",$param['postId']);
		$response = $this->db->get($this->post_table);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['postDetail'] = $response->row();
			$result['postDetail']->petImage = base_url().$result['postDetail']->petImage;
			$result['postDetail']->petImageThumb = base_url().$result['postDetail']->petImageThumb;
			$result['postDetail']->imageUrl = base_url().$result['postDetail']->imageUrl;
			$result['postDetail']->imageThumbUrl = base_url().$result['postDetail']->imageThumbUrl;
			$result['postDetail']->createTimeString = time_elapsed_string($result['postDetail']->postCreateTime);
			$result['starsCount'] = $this->stars_count_by_postid($param);
			$result['commentCount'] = $this->comments_count_by_postid($param['postId']);			
			$param['page_index'] = 0;
			$param['page_size'] = 2;
			$commentList = $this->comment_listing($param);
			if(empty($commentList['commentList'])){
				$commentList['commentList'] = array();
			}
			$result['commentList'] = $commentList['commentList'];
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No post found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to get userid who created particular post
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_userid_by_postid($postId)
	{
		$sql_sel = "";
		$sql_sel = "SELECT userId FROM ".$this->post_table." WHERE postId='".$postId."'";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->num_rows() != 0){
			$userId = $res_chk->row()->userId;
		}else{
			$userId = '';
		}			
		return $userId;
	}
	
	/**
	* Function to get post thumb image used in notification
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_post_thumbimage($postId)
	{
		$sql_sel = "";
		$sql_sel = "SELECT imageThumbUrl FROM ".$this->post_table." WHERE postId='".$postId."'";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->num_rows() != 0){
			$imageThumbUrl = $res_chk->row()->imageThumbUrl;
		}else{
			$imageThumbUrl = '';
		}			
		return $imageThumbUrl;
	}
	
	/**
	* Function to count total star on a post
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function stars_count_by_postid($param) 
	{
		$flag = FALSE;
		$this->db->where('postId', $param['postId']);
		$starCounts = $this->db->count_all_results($this->star_pet_table);
		return $starCounts;
    }
	
	
	/**
	* Function to check star already added
	*
	* @author	KS
	* @param	array
	* @return	boolean
	*/
    public function check_star_already_added($param) 
	{
		$flag = FALSE;
		$this->db->where('postId', $param['postId']);
		$this->db->where('userId', $param['userId']);
		$this->db->where('petId', $param['petId']);
		$this->db->where('starByUserId', $param['starByUserId']);
		if($this->db->count_all_results($this->star_pet_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to get all tagged photos
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_all_tagged_photos($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		// // // $sql = "SELECT posts`.`postId`, `posts`.`petId`, `userId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,`postCreateTime` FROM posts where posts.petId='".$param['petId']."' 
		// // // union 
		// // // SELECT `posts`.`postId`, `posts`.`petId`, `userId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,`postCreateTime` FROM posts join tagged_user_post_relation on(posts.postId=tagged_user_post_relation.postId) where tagged_user_post_relation.taggedUserId='".$param['userId']."' 
		// // // order by postId desc limit ".$page.",".$pageSize;
		$sql = "SELECT `posts`.`postId`, `posts`.`petId`, `userId`, `imageUrl`, `imageThumbUrl`, `imageType`, `description`,`postCreateTime` FROM posts join tagged_user_post_relation on(posts.postId=tagged_user_post_relation.postId) where tagged_user_post_relation.taggedUserId='".$param['userId']."' 
		order by postId desc limit ".$page.",".$pageSize;
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		if($response->num_rows() > 0){
			$result['countTaggedPhotos'] = $this->db->query('SELECT FOUND_ROWS() count;')->row()->count;
			$result['taggedPhotos'] = $response->result();
			foreach($result['taggedPhotos'] as $key=>$value){				
				$value->imageUrl = base_url().$value->imageUrl;
				$value->imageThumbUrl = base_url().$value->imageThumbUrl;			
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No post found.";
			$result['status'] = 202;
		}
	    
		return $result;
	}
	
	/**
	* Function to list starred pets
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_starred_pets($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		$sql = "SELECT p.*,count(*) as starcount,pt.petName,pt.petScreenName FROM star_pets sp join posts p on(p.postId=sp.postId) join pets pt on(pt.petId=p.petId) group by sp.postId order by starcount desc limit ".$page.",".$pageSize;
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		if($response->num_rows() > 0){
			$result['starredPetList'] = $response->result();
			foreach($result['starredPetList'] as $key=>$value){				
				$value->imageUrl = base_url().$value->imageUrl;
				$value->imageThumbUrl = base_url().$value->imageThumbUrl;			
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No post found.";
			$result['status'] = 202;
		}
	    
		return $result;
	}
	
	/**
	* Function to list user's starred pets
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function user_starred_pets($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		$screenNameResult = $this->User_model->check_username($param);
		if($screenNameResult['status'] == 200){
			$result['message'] = "Username not exist.";
			$result['status'] = 202;
		}else{
			$userId = $this->User_model->get_user_id_by_screenName($param['screenName']); 
			$sql = "SELECT p.*,count(*) as starcount,pt.petName,pt.petScreenName FROM star_pets sp join posts p on(p.postId=sp.postId) join pets pt on(pt.petId=p.petId) where p.userId='".$userId."' group by sp.postId order by starcount desc limit ".$page.",".$pageSize;
			$response = $this->db->query($sql);
			//echo $this->db->last_query();
			if($response->num_rows() > 0){
				$result['starredPetList'] = $response->result();
				foreach($result['starredPetList'] as $key=>$value){				
					$value->imageUrl = base_url().$value->imageUrl;
					$value->imageThumbUrl = base_url().$value->imageThumbUrl;			
				}
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "No data found.";
				$result['status'] = 202;
			}
	    }
		return $result;
	}
	
	/**
	* Function to show post detail
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_hashtags($param)
	{
		if(isset($param['text_search'])) {
			$this->db->like("{$this->hashtag_table}.hashtagName", $param['text_search'],'after');	
		}
		
		$this->db->select("{$this->hashtag_table}.hashtagId,hashtagName");			
		$response = $this->db->get($this->hashtag_table);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['hashtagList'] = $response->result();
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No hashtag found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to add message
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_message($param)
	{	
		$fields = array();	
        if(isset($param['messageType'])){
			$fields['messageType'] = $param['messageType'];
		} else{
			$fields['messageType'] = 0;
		}	
		 if(isset($param['productId'])){
			$fields['productId'] = $param['productId'];
		} else{
			$fields['productId'] = 0;
		}
		
		$fields['userId'] = $param['userId'];
		$fields['petId'] = $param['petId'];
		$fields['message'] = $param['message'];
		$fields['senderId'] = $param['senderId'];
		$fields['senderPetId'] = $param['senderPetId'];
		
		$fields['messageCreateTime'] = date('Y-m-d H:i:s');
		$res_ins = $this->db->insert($this->message_table, $fields);
		if($res_ins){
			$last_insert_message_id = $this->db->insert_id();
			//send notification	
			if($fields['senderId'] != $param['userId']){			
			$fields = array();
			$userResults = array();
			$fields['userId'] = $param['senderId'];	
			$fields['petId'] = $param['senderPetId'];	
			$fields['loggedUserId'] = $param['senderId'];			
			$userResults = $this->User_model->get_user_detail($fields);			
			$petResults = $this->Pet_model->get_pet_profile($fields);
			$param['notifiedByPetScreenName'] = $petResults['petProfile']->petScreenName;
			$param['notifiedByPetName'] = $petResults['petProfile']->petName;
			$param['notifiedByUserName'] = $userResults->screenName;
			if(isset($param['messageType']))
			{
			if($param['messageType'] == 1){
			$param['notificationText1'] ='sent you a gift';
			$param['notificationText'] ='sent you a message';
			$sql_ins = "";
			$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_message_id."',userId='".$param['userId']."',petId='".$param['petId']."',notifiedByUserId='".$param['senderId']."',notifiedByPetId='".$param['senderPetId']."',notificationType='3',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$param['notifiedByPetScreenName']."',notifiedByPetName='".$param['notifiedByPetName']."',notificationText='".$param['notificationText1']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
			$res2 = $this->db->query($sql_ins);
			$badgeResult = $this->User_model->add_user_badge($param);
			$sql_ins = "";
			$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_message_id."',userId='".$param['userId']."',petId='".$param['petId']."',notifiedByUserId='".$param['senderId']."',notifiedByPetId='".$param['senderPetId']."',notificationType='3',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$param['notifiedByPetScreenName']."',notifiedByPetName='".$param['notifiedByPetName']."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
			$res2 = $this->db->query($sql_ins);
			$badgeResult = $this->User_model->add_user_badge($param);
		    } else{
			$param['notificationText'] = 'sent you a message';
            $sql_ins = "";
			$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_message_id."',userId='".$param['userId']."',petId='".$param['petId']."',notifiedByUserId='".$param['senderId']."',notifiedByPetId='".$param['senderPetId']."',notificationType='3',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$param['notifiedByPetScreenName']."',notifiedByPetName='".$param['notifiedByPetName']."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
			$res2 = $this->db->query($sql_ins);
			$badgeResult = $this->User_model->add_user_badge($param);		   
		    }
			}else {
			$param['notificationText'] = 'sent you a message';	
			$sql_ins = "";
			$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_message_id."',userId='".$param['userId']."',petId='".$param['petId']."',notifiedByUserId='".$param['senderId']."',notifiedByPetId='".$param['senderPetId']."',notificationType='3',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$param['notifiedByPetScreenName']."',notifiedByPetName='".$param['notifiedByPetName']."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
			$res2 = $this->db->query($sql_ins);
			$badgeResult = $this->User_model->add_user_badge($param);
			}
			
			}
			//-----------------
			//--------------send ios push notification-------------------	
			$userDetail = $this->User_model->get_user_detail($param);
			if($userDetail->messageNotification)
			{					
				$fields = array();
				$sendNotificationParam = array();
				$fields['userId'] = $param['userId'];
				$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
				//pr($deviceResult);die;
				if(!empty($deviceResult->deviceToken))
				{
					if(strtolower($deviceResult->deviceType) == 'ios')
					{
						$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
						$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
						$sendNotificationParam['message'] = $param['notifiedByPetName']." ".$param['notificationText'];
						$sendNotificationParam['notificationType'] = 3;
						push_notification_ios($sendNotificationParam);
					}
				}
			}
			//--------------send ios push notification end-------------------
			//add post
			if(isset($param['productId']))
			{
			$fields = array();
			$fields['userId'] = $param['userId'];	
			$fields['petId'] = $param['petId'];
			$product= $this->Product_model->products_detail($param['productId']);
			$fields['imageUrl'] = $product[0]->productImage;
			$fields['imageThumbUrl'] = $product[0]->productImageThumb;
			$fields['imageType'] = 'image';
			$fields['description'] =$userResults->screenName .' sent you a gift';
			$fields['isGift	'] = 1;
			$fields['postCreateTime'] = date('Y-m-d H:i:s');
			$res_ins = $this->db->insert($this->post_table, $fields);
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to message listing
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function message_listing($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		$sql = "SELECT messages.*,pets.petScreenName,petName,petImage,petImageThumb 
					FROM messages JOIN pets 
                    ON (pets.petId=messages.senderPetId)
					WHERE (`messages`.`userId` =  '".$param['userId']."'
					AND `messages`.`petId` =  '".$param['petId']."'
					AND `messages`.`senderId` =  '".$param['senderId']."'
					AND `messages`.`senderPetId` =  '".$param['senderPetId']."')
					OR
					(`messages`.`userId` =  '".$param['senderId']."'
					AND `messages`.`petId` =  '".$param['senderPetId']."'
					AND `messages`.`senderId` =  '".$param['userId']."'
					AND `messages`.`senderPetId` =  '".$param['petId']."')
					ORDER BY messages.messageId DESC, messageCreateTime ASC LIMIT  ".$page.",".$pageSize."";
					
		$response = $this->db->query($sql);
		//echo $this->db->last_query(); die;
		if($response->num_rows() > 0){
			$result['messageList'] = $response->result();
			foreach($result['messageList'] as $key=>$value){
				$value->createTimeString = time_elapsed_string($value->messageCreateTime);
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No message found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to delete message
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function delete_message($param)
	{	
		$fields = array();	
		$fields['messageId'] = $param['messageId'];

		$res_ins = $this->db->delete($this->message_table, $fields);
		if($res_ins){
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	
}
