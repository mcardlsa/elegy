<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Product_model extends CI_Model {

	private $category_table	        = "categories"; 	// categories table 	
	private $psr_table				= "product_store_relation"; 	    // product store relation table
	private $pcr_table				= "product_category_relation"; 	    // product Category relation table
	private $store_table			= "stores"; 	    // store table
	private $product_table			= "products";       // products table
	private $price_range_table		= "price_ranges";   // price_ranges table
	private $order_item_table		= "order_items";    // order_items table
	private $wishlist_table		    = "wishlists";      // wishlists table 
	private $order_table		    = "orders";         // orders table 
	private $payment_table		    = "payments";       // payments table
	private $used_coupon_table	    = "used_coupons";	
	private $ipnlistenerdata_table_name	    = "payment_ipn_data";	
	
	public function __construct()
	{
		$this->load->model('Coupon_model');
		$this->load->model('User_model');
		$this->load->model('Order_model');
	}
	
	/**
	* Function to list products
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function product_listing($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}	
		
		// // // if(!isset($param['priceRangeId']))
		// // // {
			// // // $param['priceRangeId'] = 1;
		// // // } 
		
		// // // if(!isset($param['categoryId']))
		// // // {
			// // // $param['categoryId'] = 2;
		// // // } 
		
		$searchTextCondition = "";
		if(isset($param['text_search']) && !empty($param['text_search'])) {
			$searchTextCondition = " AND products.productName like '%".$param['text_search']."%' or products.productDescription like '%".mysql_real_escape_string($param['text_search'])."%' ";
		}
			
		$priceRangeCondition = "";
		if(isset($param['priceRangeId']) && !empty($param['priceRangeId'])){
			$priceRangeResult = $this->price_ranges($param);
			if($priceRangeResult['priceRangeList'][0]->maxPrice == 0){
				$priceRangeCondition = " AND products.productPrice>=".$priceRangeResult['priceRangeList'][0]->minPrice;
			}else{
				$priceRangeCondition = " AND products.productPrice>=".$priceRangeResult['priceRangeList'][0]->minPrice." and products.productPrice<=".$priceRangeResult['priceRangeList'][0]->maxPrice;
			}
		}
		
		$sql = "";		
		if((isset($param['categoryId']) && isset($param['priceRangeId'])) && ( !empty($param['categoryId']) && !empty($param['priceRangeId']))) {
			$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
			FROM products 
			JOIN product_category_relation on(products.productId = product_category_relation.productId and product_category_relation.categoryId='".$param['categoryId']."')
			WHERE products.productSoldQuantity<products.productQuantity"
			.$priceRangeCondition.$searchTextCondition."			
			order by products.productId desc limit ".$page.",".$pageSize;
		}elseif(isset($param['categoryId']) && !empty($param['categoryId'])){
			$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
			FROM products 
			JOIN product_category_relation on(products.productId = product_category_relation.productId and product_category_relation.categoryId='".$param['categoryId']."')
			WHERE products.productSoldQuantity<products.productQuantity".$searchTextCondition."
			order by products.productId desc limit ".$page.",".$pageSize;
		}elseif(isset($param['priceRangeId']) && !empty($param['priceRangeId'])){
			$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
			FROM products
			WHERE products.productSoldQuantity<products.productQuantity"
			.$priceRangeCondition.$searchTextCondition."
			order by products.productId desc limit ".$page.",".$pageSize;
		}else{			
			$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
			FROM products
			WHERE products.productSoldQuantity<products.productQuantity".$searchTextCondition."			
			order by products.productId desc limit ".$page.",".$pageSize;
		}
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		//echo $sql;
		if($response->num_rows()>0){
			$result['productList'] = $response->result();
			foreach($result['productList'] as $key=>$value){
				$value->productImage = base_url().$value->productImage;
				$value->productImageThumb = base_url().$value->productImageThumb;
				$fields = array();
				$fields['userId'] = $param['userId'];
				$fields['productId'] = $value->productId;
				if($this->check_product_already_added_to_wishlist($fields)){
					$value->isWishlist = 1;
				}else{
					$value->isWishlist = 0;
				}
			}			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No product found.";
			$result['status'] = 202;
		}		
		return $result;	
	}
	
	/**
	* Function to listing wishlist products
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function wishlist_product_listing($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}	
		
		$sql = "";		
		$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
		FROM products
		JOIN wishlists on(products.productId = wishlists.productId and wishlists.userId='".$param['userId']."')
		WHERE products.productSoldQuantity<products.productQuantity			
		order by wishlists.wId desc limit ".$page.",".$pageSize;
		
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['productList'] = $response->result();
			foreach($result['productList'] as $key=>$value){
				$value->productImage = base_url().$value->productImage;
				$value->productImageThumb = base_url().$value->productImageThumb;
			}			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No product found.";
			$result['status'] = 202;
		}		
		return $result;	
	}
	
	/**
	* Function to show product detail
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function get_product_detail($param)
	{		
		$this->db->select("{$this->product_table}.*");		
		$this->db->where("{$this->product_table}.productId",$param['productId']);
		$response = $this->db->get($this->product_table);
		if($response->num_rows()>0)
		{
			$result['productDetail'] = $response->row();
			$result['productDetail']->productImage = base_url().$result['productDetail']->productImage;
			$result['productDetail']->productImageThumb = base_url().$result['productDetail']->productImageThumb;
			$result['productDetail']->productAvailableQuantity = $result['productDetail']->productQuantity-$result['productDetail']->productSoldQuantity;
			$result['productDetail']->purchaseCount = $this->product_purchase_count($param);
			if($this->check_product_already_added_to_wishlist($param)){
				$result['productDetail']->isWishlist = 1;
			}else{
				$result['productDetail']->isWishlist = 0;
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}
		else
		{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	
	/**
	* Function to product sale count
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function product_purchase_count($param) 
	{
		$flag = FALSE;
		$this->db->where('productId', $param['productId']);
		$purchaseCounts = $this->db->count_all_results($this->order_item_table);
		return $purchaseCounts;
    }
	
	/**
	* Function to add_product_to_wishlist
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_product_to_wishlist($param)
	{
		if($this->check_product_already_added_to_wishlist($param))
		{
			$this->db->where('productId', $param['productId']);
			$this->db->where('userId', $param['userId']);
			$res = $this->db->delete($this->wishlist_table);
			if($res){
				$result['message'] = "Product removed from wishlist successfully.";
				$result['flag'] = 0;
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}
		else
		{	
			$fields = array();
			$fields['productId'] = $param['productId'];
			$fields['userId'] = $param['userId'];
			$fields['wishlistCreateTime'] = date('Y-m-d H:i:s');
			$res_ins = $this->db->insert($this->wishlist_table, $fields);
			if($res_ins){
				$result['message'] = "Product added to wishlist successfully.";
				$result['flag'] = 1;
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}			
		}
		return $result;
	}
	
	/**
	* Function to make order and generate unique invoice id
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function confirm_order($param)
	{		
		$fields = array();
		$fields['userId'] = $param['userId'];
		// set unique user token
		$fields['invoiceId'] = randomToken(32, false, true, false);
		if($this->check_invoice_token($fields['invoiceId'])){
			$fields['invoiceId'] = $this->getNewInvoiceToken();
		}
		$fields['orderCreateTime'] = date('Y-m-d H:i:s');
		$res_ins = $this->db->insert($this->order_table, $fields);
		if($res_ins){
			$result['invoiceId'] = $fields['invoiceId'];
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to check invoice id in orders table
	*
	* @author	KS
	* @param	variable
	* @return	boolean
	*/
    public function check_invoice_token($invoiceId) 
	{
		$flag = FALSE;
    	if (empty($invoiceId))
		{
			return $flag;
		}	
		$this->db->where('invoiceId', $invoiceId);
		if($this->db->count_all_results($this->order_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to generate and check invoice id in orders table then return unique invoice id
	*
	* @author	KS
	* @param	none
	* @return	variable
	*/	
	public function getNewInvoiceToken() 
	{
		$invoiceId = randomToken(32, false, true, false);
		if($this->check_invoice_token($invoiceId)){
			$this->getNewInvoiceToken();
		}		
		return $invoiceId;
    }
	
	/**
	* Function to purchase product
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function purchase_product($param)
	{
		if(empty($param['productList']) || empty($param['shippingAddress']) || empty($param['totalAmount']))
		{
			$result['message'] = "All mandatory fields required.";
			$result['status'] = 202;
			return $result;
		}
		else
		{
			if(!empty($param['productList']))
			{	
				
				//----------check all validation first-----------
				if(isset($param['productList']))
				{
					foreach($param['productList'] as $key=>$val)
					{
						$fields = array();
						$fields['productId'] = $val['productId'];
						$fields['orderQuantity'] = $val['orderQuantity'];
						$quantityResult = $this->check_product_quantity($fields);
						if($quantityResult['status']==202){
							$result['message'] = "Available quantity for product ".$val['productName']." is ".$quantityResult['availableQuantity']."";
							$result['status'] = 202;
							return $result;
						}
					}
				}
				
				if(isset($param['couponCode']) && !empty($param['couponCode']))
				{
					$param['couponId'] = $this->Coupon_model->get_coupon_id($param['couponCode']);
				}
				// // // if(isset($param['couponCode']) && !empty($param['couponCode']))
				// // // {
					// // // $couponStatus = $this->Coupon_model->check_coupon_validation($param);
					// // // if($couponStatus['status'] == 202)
					// // // {
						// // // $result['message'] = $couponStatus['message'];
						// // // $result['status'] = 202;
						// // // return $result;
					// // // }
					// // // else
					// // // {
						// // // $param['couponId'] = $this->Coupon_model->get_coupon_id($param['couponCode']);
						// // // $couponResult = $this->Coupon_model->coupon_detail_api($param);	
						// // // $couponUsedCounter = $this->Coupon_model->coupon_used_counter($param);

						// // // if($param['grandTotalAmount'] < $couponResult['couponDetail']->couponMinValue)
						// // // {
							// // // $result['message'] = "Minimum amount for use this coupon should be $".$couponResult['couponDetail']->couponMinValue;
							// // // $result['status'] = 202;
							// // // return $result;
						// // // }
						
						// // // if($couponResult['couponDetail']->couponCounter <= $couponUsedCounter)
						// // // {
							// // // $result['message'] = "Coupon has been used maximum number of customers, please try another";
							// // // $result['status'] = 202;
							// // // return $result;
						// // // }
						
						// // // if($this->Coupon_model->check_coupon_date_validation($param) == 0)
						// // // {
							// // // $result['message'] = "Coupon is out of date, please try another";
							// // // $result['status'] = 202;
							// // // return $result;
						// // // }
					// // // }						
				// // // }
				//-----------------------------------------------
				
				// for unique string
				$productIdStr = '';
				if(isset($param['productList']))
				{
					foreach($param['productList'] as $key=>$val)
					{
						$productIdStr .= $val['productId'];
					}
				}
				
				$fields = array();
				$param['orderId'] = $this->get_order_id($param['invoiceId']);
				if(!empty($param['orderId']))
				{
					// Init curl
					 $ch = curl_init(); 
					// Set request options 
					curl_setopt_array($ch, array ( CURLOPT_URL => $this->config->item('paypal_sandbox_url'),
					  CURLOPT_POST => TRUE,
					  CURLOPT_POSTFIELDS => http_build_query(array
						(
						  'cmd' => '_notify-synch',
						  'tx' => $param['txnId'],
						  'at' => $this->config->item('merchant_pdt_identity'),
						)),
					  CURLOPT_RETURNTRANSFER => TRUE,
					  CURLOPT_HEADER => FALSE,
					  // CURLOPT_SSL_VERIFYPEER => TRUE,
					  // CURLOPT_CAINFO => 'cacert.pem',
					));
					// Execute request and get response and status code
					$response = curl_exec($ch);
					$status   = curl_getinfo($ch, CURLINFO_HTTP_CODE);
					// Close connection
					curl_close($ch);

					if($status == 200 AND strpos($response, 'SUCCESS') === 0)
					{
	
						$fields['userId'] = $param['userId'];
						$fields['shippingAddress'] = $param['shippingAddress'];
						$fields['totalAmount'] = $param['totalAmount'];
						$fields['orderUniqueId'] = time()."_".$param['userToken']."_".$productIdStr;
						$fields['discountAmount'] = $param['discountAmount'];
						$fields['deliveryAmount'] = $param['deliveryAmount'];
						$fields['taxAmount'] = $param['taxAmount'];
						$fields['currency'] = $param['currency'];
						
						$param['orderUniqueId'] = $fields['orderUniqueId'];
						
						$this->db->where('invoiceId', $param['invoiceId']);
						$res_ins = $this->db->update($this->order_table, $fields);
						if($res_ins)
						{
							$last_insert_order_id = $param['orderId'];
							if(isset($param['productList']))
							{
								foreach($param['productList'] as $key=>$val)
								{
									$fields = array();
									$fields['orderId'] = $last_insert_order_id;
									$fields['productId'] = $val['productId'];
									$fields['orderQuantity'] = $val['orderQuantity'];
									$fields['singleProductPrice'] = $val['singleProductPrice'];
									$fields['orderItemCreateTime'] = date('Y-m-d H:i:s');
									$res_ins = $this->db->insert($this->order_item_table, $fields);
									if($res_ins)
									{								
										$this->db->set('productSoldQuantity', 'productSoldQuantity+'.$val['orderQuantity'], FALSE);
										$this->db->set('productUpdateTime', date('Y-m-d H:i:s'), TRUE);			
										$this->db->where("{$this->product_table}.productId", $val['productId']);
										$res_upd = $this->db->update($this->product_table);
									}
								}
							}
							
							if(isset($param['couponCode']) && !empty($param['couponCode']))
							{
							$fields = array();
							$fields['couponId'] = $param['couponId'];
							$fields['userId'] = $param['userId'];
							$fields['orderId'] = $last_insert_order_id;
							$fields['ucCreateTime'] = date('Y-m-d H:i:s');
							$res_ins = $this->db->insert($this->used_coupon_table, $fields);
							}
							
							$fields = array();
							$fields['orderId'] = $last_insert_order_id;
							$fields['userId'] = $param['userId'];
							$fields['amount'] = $param['totalAmount'];
							$fields['txnId'] = $param['txnId'];
							$fields['paymentData'] = serialize($response);
							$fields['responseStatus'] = $param['responseStatus'];
							$fields['paymentDate'] = date('Y-m-d H:i:s');
							$fields['paymentCreateTime'] = date('Y-m-d H:i:s');
							$res_ins = $this->db->insert($this->payment_table, $fields);
							
							if($res_ins){
								$emailId = $this->User_model->get_email_by_user_id($param['userId']);
								if($emailId != '')
								{
									$param['site_name'] = $this->config->item('site_name', 'user_auth');
									$this->User_model->_send_email('product_order', $emailId, $param, 'Order Confirmation');
								}
							}
							
							$result['message'] = "Product purchased successfully.";
							$result['status'] = 200;
						}				
						else
						{
							$result['message'] = "There is something wrong, try after sometime.";
							$result['status'] = 202;
						}
					}
					else
					{
						$result['message'] = "Transaction id is not valid.";
						$result['status'] = 202;
					}
				}
				else
				{
					$result['message'] = "Invoice id does not exist.";
					$result['status'] = 202;
				}				
			}
			else
			{
				$result['message'] = "At least one product required to purchase, try again.";
				$result['status'] = 202;
			}	
		}		
		return $result;
	}
	
	/**
	* Function to put data from ipn listener
	*
	* @author	KS
	*/	
	public function ipn_listenerdata($data)
	{					
		$listenerdata = array(
			'data' => $data,
			'date' => date('Y-m-d H:i:s')
							
		);
		return $this->db->insert($this->ipnlistenerdata_table_name, $listenerdata);				
	}
	
	/**
	* Function to update status after ipn listener
	*
	* @author	KS
	*/
	public function updatePaymentIPNpaymentResponce($data)
	{					
		$Responcedetails = array(
			'responseStatus' => $data['payment_status']			
		);
		//$data['txn_id'] = '7W131601VM387790M11111';
		$this->db->where('txnId',$data['txn_id']);
		$this->db->update($this->payment_table, $Responcedetails);				
	}
	
	/**
	* Function to get orderId from invoiceId
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_order_id($invoiceId) 
	{
		$orderId = '';
		$this->db->select("{$this->order_table}.orderId");
		$this->db->where('invoiceId', $invoiceId);
		$result = $this->db->get($this->order_table);
		if($result->num_rows()>0){
		$orderId = $result->row()->orderId;
		}
		return $orderId;
    }
	
	/**
	* Function to check product quantity
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_product_quantity($param)
	{
		$sql_sel = "";
		$sql_sel = "SELECT productQuantity-productSoldQuantity as availableQuantity FROM `products` where productId='".$param['productId']."'";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->row()->availableQuantity >= $param['orderQuantity']){
			$result['status'] = 200;			
		}else{
			$result['availableQuantity'] = $res_chk->row()->availableQuantity;
			$result['status'] = 202;
		}			
		return $result;
	}
	
	/**
	* Function to check product already added to wishlist
	*
	* @author	KS
	* @param	array
	* @return	boolean
	*/
    public function check_product_already_added_to_wishlist($param) 
	{
		$flag = FALSE;
		$this->db->where('objectId', $param['productId']);
		$this->db->where('userId', $param['userId']);
		$this->db->where('wishType', 1);
		if($this->db->count_all_results($this->wishlist_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to get all price range
	*
	* @author	KS
	* @param	none
	* @return	array
	*/	
	public function price_ranges($param = array())
	{
		if(isset($param['priceRangeId'])){
			$this->db->where("{$this->price_range_table}.priceRangeId",$param['priceRangeId']);
		}
		$response = $this->db->get($this->price_range_table);
		if($response->num_rows()>0)
		{
			$result['priceRangeList'] = $response->result();
			$result['status'] = 200;
		}
		else
		{
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to Counting the number of pets
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function record_count($searchStr = NULL) 
	{
                if(isset($searchStr)){
                $this->db->like('productName', $searchStr,'after');
                
                }
                $this->db->select("{$this->product_table}.productId,productName,productDescription,productImage,productImageThumb,productPrice,productQuantity,{$this->category_table}.categoryName,{$this->store_table}.storeName,");
                $this->db->join($this->psr_table,"{$this->psr_table}.productId = .". $this->product_table.'.productId');
				$this->db->join($this->store_table,"{$this->store_table}.storeId = .". $this->psr_table.'.storeId');					  
                $count = $this->db->count_all_results($this->product_table);
                //echo $this->db->last_query();
		        
                return $count;
    }
	
	/**
	* Function to LISTING
	*
	* @author        Shashank
	* @param         var,var,var
	* @return        array
	*/
    public function all_product($limit, $start,$searchStr)
	{        
		if(isset($searchStr)){
			$this->db->like('productName', $searchStr,'after');
			
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("productName", "asc");
		$this->db->select("{$this->product_table}.productId,productName,productDescription,productImage,productImageThumb,productSoldQuantity,productPrice,productQuantity,{$this->store_table}.storeName,");
		$this->db->join($this->psr_table,"{$this->psr_table}.productId = .". $this->product_table.'.productId');
		$this->db->join($this->store_table,"{$this->store_table}.storeId = .". $this->psr_table.'.storeId');					  
        $response = $this->db->get($this->product_table);                
		//echo $this->db->last_query();
		$data = array();
		$data = $response->result_array();
		return $data;
		
	}
	
	
	
	
		/**
	* Function to add single product for single user
	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/	
	public function add_product($param,$id)
	{
		
		//pr($param);
		$fields = array();
		$fields = array();
		
		$fields2['storeId'] = $param['storeName'];
		$fields['productName'] = $param['productName'];
		$fields['productPrice'] =$param['productPrice'];
		$fields['productQuantity'] = $param['productQuantity'];
	 	$fields['userId'] = $id;	 
	    $fields['productCreateTime'] = date('Y-m-d H:i:s');
		if(isset($param['productDescription'])){
		$fields['productDescription'] = $param['productDescription'];
		}
		if(!empty($_FILES['productImage']['name'])){
				$target_path = PRODUCT_IMAGE_PATH;
                			
				$target_path = $target_path .time().'_' . basename(str_replace(' ', '_', $_FILES['productImage']['name'])); 
				$img_resp = move_uploaded_file($_FILES['productImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = PRODUCT_IMAGE_THUMB_PATH.time().str_replace(' ', '_',$_FILES['productImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['productImageThumb'] = $target_thumb_path;
						}else{
								$fields['productImageThumb'] = PRODUCT_IMAGE_THUMB_PATH."default.png";
						}
						$fields['productImage'] = $target_path;
				}else{
						$fields['productImage'] = PRODUCT_IMAGE_PATH."default.png";
						$fields['productImageThumb'] = PRODUCT_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				$fields['productImage'] = PRODUCT_IMAGE_PATH."default.png";
				$fields['productImageThumb'] = PRODUCT_IMAGE_THUMB_PATH."default.png";
		}    
		
		$res_ins =$this->db->insert($this->product_table, $fields);
		$last_id =$this->db->insert_id();
		$fields1['productId'] = $last_id;
		$fields2['productId'] = $last_id;
		 
		
		if($res_ins)
		{
			for($i=0;$i<count($param['categoryName']);$i++)
			{
				$fields1 = array();
				$fields1['productId'] = $last_id;
				$fields1['categoryId'] = mysql_real_escape_string($param['categoryName'][$i]);
				$this->db->insert($this->pcr_table, $fields1); 
			}
		
			if($res_ins)
			{
				$res_ins =$this->db->insert($this->psr_table, $fields2);
				if($res_ins){			
					$result['message'] = "success";
					$result['status'] = 200;
				}	
				else{
					$result['message'] = "Insert query failed.";
					$result['status'] = 202;
				}	
			}
			else{
					$result['message'] = "Insert query failed.";
					$result['status'] = 202;
			}
		}	
		//echo $this->db->last_query();
		else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
	    }

		
		return $result;
	}
	
	/**
	* Function to get single product
	*
	* @author	Shashank
	* @param	array
	* @return	object array
	*/
	public function get_product($param)
	{
		$this->db->order_by("{$this->product_table}.productName", "asc");	
		$this->db->select("{$this->product_table}.productId,productName,productDescription,productImage,productImageThumb,productPrice,productQuantity,{$this->category_table}.categoryName,{$this->store_table}.storeName,");
		$this->db->join($this->pcr_table,"{$this->pcr_table}.productId = .". $this->product_table.'.productId');
		$this->db->join($this->category_table,"{$this->category_table}.categoryId = .". $this->pcr_table.'.categoryId');				  
		$this->db->join($this->psr_table,"{$this->psr_table}.productId = .". $this->product_table.'.productId');
		$this->db->join($this->store_table,"{$this->store_table}.storeId = .". $this->psr_table.'.storeId');					  
		$response = $this->db->get($this->product_table);
		return $response->result();
	}
	
	/**
	* Function to update the product
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_product($param)
	{
		$fields = array();
		$fields1=array();
	    
		
		$fields1['categoryId'] = $param['categoryName'];
		$fields2['storeId'] = $param['storeName'];
		$fields['productName'] =$param ['productName'];
		$fields['productPrice'] = $param['productPrice'];
		$fields['productQuantity'] = $param['productQuantity'];
		$fields['productUpdateTime'] = date('Y-m-d H:i:s');
		
		if(isset($param['productDescription'])){
		$fields['productDescription'] = $param['productDescription'];
		}
		   if(!empty($_FILES['productImage']['name'])){
				$target_path = PRODUCT_IMAGE_PATH;
                			
				$target_path = $target_path .time().'_' . basename(str_replace(' ', '_', $_FILES['productImage']['name'])); 
				$img_resp = move_uploaded_file($_FILES['productImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = PRODUCT_IMAGE_THUMB_PATH.time().str_replace(' ', '_',$_FILES['productImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['productImageThumb'] = $target_thumb_path;
						}else{
								$fields['productImageThumb'] = PRODUCT_IMAGE_THUMB_PATH."default.png";
						}
						$fields['productImage'] = $target_path;
				}else{
						$fields['productImage'] = PRODUCT_IMAGE_PATH."default.png";
						$fields['productImageThumb'] = PRODUCT_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				
		}   
		$fields1['productId'] =$param['productId'];
		$fields2['productId'] =$param['productId'];
		
		$res_ins=$this->db->where('productId',$param['productId']);
		$res_ins = $this->db->update($this->product_table, $fields);
		if($res_ins)
		{
		//$res_ins=$this->db->where('productId',$param['productId']);
		$res_ins = $this->db->delete($this->pcr_table, array('productId' =>$param['productId']));
		if($res_ins)
		{
		  for($i=0;$i<count($param['categoryName']);$i++)
			{
				$fields1 = array();
				$fields1['productId'] = $param['productId'];
				$fields1['categoryId'] = mysql_real_escape_string($param['categoryName'][$i]);
				$this->db->insert($this->pcr_table, $fields1); 
			}
		
			
		if($res_ins)
		{
		$res_ins=$this->db->where('productId',$param['productId']);
		$res_ins = $this->db->delete($this->psr_table, $fields2);
		if($res_ins)
		{	
				$fields2['productId'] = $param['productId'];
				$fields2['storeId'] = $param['storeName'];
				$this->db->insert($this->psr_table, $fields2); 
			
			if($res_ins){
				$result['productInfo'] = $this->get_product($fields);
				foreach($result['productInfo'] as $key=>$value){
				$value->productImage = base_url().$value->productImage;
					}
				$result['message'] = "success";
				$result['status'] = 200;
		}
		else{
				$result['message'] = "update query failed.";
				$result['status'] = 202;
		}	
			
		}
		else{
				$result['message'] = "update query failed.";
				$result['status'] = 202;
		}
		}else{
				$result['message'] = "update query failed.";
				$result['status'] = 202;
		}
		}else{
				$result['message'] = "update query failed.";
				$result['status'] = 202;
		}
		}else{
				$result['message'] = "update query failed.";
				$result['status'] = 202;
		}		
		return $result;
	}
		/**
	* Function to product detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function product_detail($id)
    {        
        if(isset($id))
        { 
			$this->db->where("{$this->product_table}.productId",$id); 
			$this->db->select("{$this->product_table}.productId,productName,productDescription,productImage,productImageThumb,productPrice,productQuantity,{$this->store_table}.storeName,{$this->store_table}.storeId");
			$this->db->join($this->psr_table,"{$this->psr_table}.productId = .". $this->product_table.'.productId');
			$this->db->join($this->store_table,"{$this->store_table}.storeId = .". $this->psr_table.'.storeId');					  
			               
			$response = $this->db->get($this->product_table);                
			//echo $this->db->last_query();
			$result= $response->result_array();
		
			return $result;
        }
    }
	   
	/**
	* Function to get Product Category
	*
	* @author       Shashank
	* @param        none
	* @return       array
	*/
	public function get_category()
	{
		$this->db->select("{$this->category_table}.categoryName, {$this->category_table}.categoryId");
		$query = $this->db->get($this->category_table);
		$categorylist = array();
		
		if ($query->num_rows() > 0) {
				foreach($query->result() as $category) {
						$categorylist[$category->categoryId] = $category->categoryName;
				}
		}
		return $categorylist;
	}
	
	/**
	* Function to get Product Store
	*
	* @author       Shashank
	* @param        none
	* @return       array
	*/
	public function get_store()
	{
		$this->db->select("{$this->store_table}.storeName, {$this->store_table}.storeId");
		$query = $this->db->get($this->store_table);
		$storelist = array();
		$storelist[''] = 'Select Store';
		if ($query->num_rows() > 0) {
				foreach($query->result() as $store) {
						$storelist[$store->storeId] = $store->storeName;
				}
		}
		return $storelist;
	}
	
	/**
	* Function to deleting the product
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function product_delete($id)
    {
		return $this->db->delete($this->product_table, array('productId' => $id));
    }
	
	/**
	* Function to Get categoryID by the product ID
	*
	* @author       Shashank
	* @param        var
	* @return       array
	*/ 
	
	public function get_categoryId($id)
    {
		$response=$this->db->select("{$this->category_table}.categoryId");
		$response=$this->db->where('productId',$id);	
		$response=$this->db->join($this->category_table,"{$this->category_table}.categoryId = .". $this->pcr_table.'.categoryId');
		$response = $this->db->get($this->pcr_table);
		return $response->result();
    }
	
	/**
	* Function to Get categoryName by the product ID
	*
	* @author       Shashank
	* @param        array
	* @return        array
	*/ 
    public function get_categoryName($id)
    {
		$response=$this->db->select("{$this->category_table}.categoryName");
		$response=$this->db->where('productId',$id);	
		$response=$this->db->join($this->category_table,"{$this->category_table}.categoryId = .". $this->pcr_table.'.categoryId');
		$response = $this->db->get($this->pcr_table);
		return $response->result();
    }
   
   /**
	* Function to Get virtualGifts by the user ID
	*
	* @author       Shashank
	* @param        array
	* @return        array
	*/ 
   public function get_virtual_gift_by_userId($param)
   {
		if(isset($param['page_index']) && isset($param['page_size'])) {
		    $page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
        	
		$orderId = $this->Order_model->get_order($param['userId']);
		
		if(!empty($orderId))
	    {
			
		$productId= $this->products($orderId);
			if(!empty($productId))
			{
			$this->db->select("{$this->product_table}.*");
			$response=$this->db->join($this->pcr_table,"{$this->pcr_table}.productId = .". $this->product_table.'.productId');
			$this->db->where_in("{$this->product_table}.productId",$productId);
		
			$this->db->where('categoryId',1);
			$this->db->limit($pageSize,$page);
			$response = $this->db->get($this->product_table);
			$response = $response->result();
			foreach($response as $key=>$value){
					$value->productImage = base_url().$value->productImage;
					$value->productImageThumb = base_url().$value->productImageThumb;
				}
			$result['message'] = "success";
			$result['status'] = 200;
			$result['virtual_gifts']=$response;
			
			return $result;
			} else {
				$result['message'] = "No Gift found.";
				$result['status'] = 202;
				return $result;
			} 
		} else {
			$result['message'] = "No Gift found.";
			$result['status'] = 202;
			return $result;
		}
		
   }
  
   
    /**
	* Function to Get products by the order ID's
	*
	* @author       Shashank
	* @param        array
	* @return        array
	*/ 
   public function products($param)
   {		
		$this->db->where_in('orderId',$param);
		$this->db->select("{$this->order_item_table}.productId"); 
		
		$response = $this->db->get($this->order_item_table);
		$productId=array();
		foreach($response->result_array() as $val)
		{
			foreach($val as $value)
			{
			 $productId[]=$value;	
			}
		}
		return $productId;
   }	
   
   /**
	* Function to Get products detail 
	*
	* @author       Shashank
	* @param        array
	* @return        array
	*/ 
   public function products_detail($id)
   {		
		$this->db->where('productId',$id);
		$this->db->select("{$this->product_table}.*"); 
		$response = $this->db->get($this->product_table);
		$result = $response->result();
		
		return $result;
   }	
} 