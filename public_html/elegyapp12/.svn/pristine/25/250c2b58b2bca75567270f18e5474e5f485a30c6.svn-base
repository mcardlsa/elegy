<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Coupon_model extends CI_Model {


    private $coupon_table		= "coupons"; 	        // main model table 	
	private $coupon_type_table	= "coupon_types";
	private $used_coupon_table	= "used_coupons";

	public function __construct()
	{
		
	}
	
	/**
	* Function to get coupon detail
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function coupon_detail_api($param)
	{						
		$this->db->select("{$this->coupon_table}.*");			
		$this->db->where("{$this->coupon_table}.couponId",$param['couponId']);
		$this->db->where("{$this->coupon_table}.isDeleted",0);
		$response = $this->db->get($this->coupon_table);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['couponDetail'] = $response->row();
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No coupon found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to get couponId from usertoken
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_coupon_id($couponCode) 
	{
		$couponId = '';
		$this->db->select("{$this->coupon_table}.couponId");
		$this->db->where('couponCode', $couponCode);
		$result = $this->db->get($this->coupon_table);
		if($result->num_rows()>0){
		$couponId = $result->row()->couponId;
		}
		return $couponId;
    }
	
	/**
	* Function to check coupon validation
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_coupon_validation($param) 
	{
		$result = array();
		$flag = FALSE;
		$this->db->where('couponCode', $param['couponCode']);
		$this->db->where('isDeleted', 0);
		if($this->db->count_all_results($this->coupon_table) > 0){
			$flag = TRUE;
		}
		//echo $this->db->last_query();
		if($flag){
			$param['couponId'] = $this->get_coupon_id($param['couponCode']);
			$couponResult = $this->coupon_detail_api($param);	
			$couponUsedCounter = $this->coupon_used_counter($param);

			if($param['grandTotalAmount'] < $couponResult['couponDetail']->couponMinValue)
			{
				$result['message'] = "Minimum amount for use this coupon should be $".$couponResult['couponDetail']->couponMinValue;
				$result['status'] = 202;
				return $result;
			}
			
			if($couponResult['couponDetail']->couponCounter <= $couponUsedCounter)
			{
				$result['message'] = "Coupon has been used by maximum number of customers, please try another";
				$result['status'] = 202;
				return $result;
			}
			
			if($this->check_coupon_date_validation($param) == 0)
			{
				$result['message'] = "Coupon is out of date, please try another";
				$result['status'] = 202;
				return $result;
			}
		
			$result['message'] = "Coupon code exist.";
			$result['status'] = 200;
		}else{
			$result['message'] = "Coupon code does not exist.";
			$result['status'] = 202;
		}
		
		
		return $result;
    }
	
	/**
	* Function to get used coupon counter
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
	public function coupon_used_counter($param)
	{
		$counter = 0;
		$sql_sel = "";
		$sql_sel = "SELECT * FROM ".$this->used_coupon_table." WHERE couponId='".$param['couponId']."'";
		$res_chk = $this->db->query($sql_sel);		
		$counter = $res_chk->num_rows();					
		return $counter;
	}
	
	/**
	* Function to check coupon date validation
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
	public function check_coupon_date_validation($param)
	{
		$counter = 0;
		$sql_sel = "";
		$sql_sel = "SELECT count(*) as counter FROM ".$this->coupon_table." WHERE CURDATE() between couponStartDate and couponEndDate AND couponId='".$param['couponId']."'";
		$res_chk = $this->db->query($sql_sel);		
		$counter = $res_chk->row()->counter;					
		return $counter;
	}
	
	/**
	* Function to Counting the number of Coupon
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
    public function record_count($searchStr = NULL) 
	{
		if(isset($searchStr)){
		$this->db->like('couponName', $searchStr,'after');

		}
		$this->db->select("{$this->coupon_table}.couponId,couponCode,couponName,couponDescription,couponType,couponValue,couponMinValue,couponStartDate,couponEndDate,couponCounter");     
		$count = $this->db->count_all_results($this->coupon_table);
		//echo $this->db->last_query();
		return $count;
    }
	
	/**
	* Function to LISTING
	*
	* @author      Shashank
	* @param        var,var,var
	* @return       array
	*/
    public function all_coupon($limit, $start,$searchStr)
	{        
		if(isset($searchStr)){
			$this->db->like('couponName', $searchStr,'after');
			
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("couponName", "asc");
		$this->db->select("{$this->coupon_table}.couponId,isDeleted,couponCode,couponName,couponDescription,{$this->coupon_table}.couponTypeId,couponValue,couponMinValue,couponStartDate,couponEndDate,couponCounter,{$this->coupon_type_table}.couponType");     
        $this->db->join($this->coupon_type_table,"{$this->coupon_type_table}.couponTypeId = .". $this->coupon_table.'.couponTypeId');
        $response = $this->db->get($this->coupon_table);                
		//echo $this->db->last_query();
		return $response->result_array();
	}
	
	
	/**
	* Function to add single Coupon 
	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/	
	public function add_coupon($param)
	{
		$fields = array();
		
		$fields['couponName'] = $param['couponName'];
        $fields['couponTypeId'] = $param['couponType'];
		$fields['couponValue'] = $param['couponValue'];
		$fields['couponMinValue'] = $param['couponMinValue'];
		$fields['couponStartDate'] = $param['couponStartDate'];
		$fields['couponEndDate'] =$param['couponEndDate'];
		$fields['couponCounter'] = $param['couponCounter'];
		$fields['couponDescription'] = $param['couponDescription'];
		$fields['couponCode'] = randomToken(12, false, true, false);
		$fields['createTime'] = date('Y-m-d H:i:s');
			if($this->check_coupon_code($fields['couponCode'])){
				$fields['couponCode'] = $this->getNewCouponCode();
			}
        $res_ins = $this->db->insert($this->coupon_table, $fields);
		if($res_ins){
			$result['couponInfo'] = $this->get_coupon($fields);
			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		//pr($result);
		return $result;
	}
	
	/**
	* Function to get single Coupon
	*
	* @author	Shashank
	* @param	array
	* @return	object array
	*/
	public function get_coupon($param)
	{
		$this->db->order_by("{$this->coupon_table}.couponName", "asc");	
		$this->db->select("{$this->coupon_table}.couponId,couponName,couponDescription,couponTypeId,couponValue,couponMinValue,couponStartDate,couponEndDate,couponCounter");     
			
		$response = $this->db->get($this->coupon_table);
		return $response->result();
	}
	
	/**
	* Function to update the Coupon
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_coupon($param)
	{
		$fields = array();
		// pr($param);
		
		$fields['couponName'] = $param['couponName'];
		$fields['couponTypeId'] =$param['couponType'];
		$fields['couponValue'] = $param['couponValue'];
		$fields['couponMinValue'] = $param['couponMinValue'];
		$fields['couponStartDate'] = $param['couponStartDate'];
		$fields['couponEndDate'] = $param['couponEndDate'];
		$fields['couponCounter'] = $param['couponCounter'];
		$fields['couponDescription'] = $param['couponDescription'];
		$fields['updateTime'] = date('Y-m-d H:i:s');           
		$res_ins=$this->db->where('couponId',$param['couponId']);
		$res_ins = $this->db->update($this->coupon_table, $fields);
		//echo $this->db->last_query();
        if($res_ins){
				$result['couponInfo'] = $this->get_coupon($fields);
				$result['message'] = "success";
				$result['status'] = 200;
		}else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to Coupon detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function coupon_detail($id)
    {        
        if(isset($id))
        { 
			$this->db->select("{$this->coupon_table}.couponId,couponName,couponDescription,{$this->coupon_table}.couponTypeId,couponValue,couponMinValue,couponStartDate,couponEndDate,couponCounter,{$this->coupon_type_table}.couponType");     
            $this->db->join($this->coupon_type_table,"{$this->coupon_type_table}.couponTypeId = .". $this->coupon_table.'.couponTypeId');
            $this->db->where('couponId',$id);                
			$response = $this->db->get($this->coupon_table);                
			//echo $this->db->last_query();
			return $response->result_array();
        }
    }
	/**
	* Function to get Coupon Type
	*
	* @author       Shashank
	* @param        none
	* @return       array
	*/ 
	
	public function get_coupons()
	{
		$this->db->select("{$this->coupon_type_table}.couponType,couponTypeId");
		$query = $this->db->get($this->coupon_type_table);
		$couponlist = array();
		$couponlist[''] = 'Select Coupon';
		if ($query->num_rows() > 0) {
				foreach($query->result() as $coupon) {
						$couponlist[$coupon->couponTypeId] = $coupon->couponType;
				}
		}
		return $couponlist;
	}
	/**
	* Function to deleting the Coupon
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function coupon_delete($id)
    {
	return $this->db->delete($this->coupon_table, array('couponId' => $id));
    }
    
    /**
	* Function to generate and check CouponCode in users table then return unique coupon
	*
	* @author	shashank
	* @param	none
	* @return	variable
	*/	
	public function getNewCouponCode() 
	{
		$CouponCode = randomToken(12, false, true, false);
		if($this->check_screen_name($CouponCode)){
			$this->getNewScreenName();
		}		
		return $CouponCode;
    }
    
    /**
	* Function to check CouponCode in Coupons table
	*
	* @author	Shashank
	* @param	variable
	* @return	boolean
	*/
    public function check_coupon_code($CouponCode) 
	{
		$flag = FALSE;
    	if (empty($CouponCode))
		{
			return $flag;
		}	
		$this->db->where('couponCode', $CouponCode);
		if($this->db->count_all_results($this->coupon_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
    
    /**
	 * Update delete status
	 * @author	Shashank
	 * @param var,var
	 * @return	void
	 */	
	function status_update($id,$data)
    {   
		$this->db->where('couponId', $id);
		
		$this->db->update($this->coupon_table, $data);
		
    }
	
}
	