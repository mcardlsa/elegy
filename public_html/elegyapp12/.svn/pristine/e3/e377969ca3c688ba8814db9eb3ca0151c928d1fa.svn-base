<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Wishlist_model extends CI_Model {

	private $pet_table		        = "pets"; 		// main model table 
	private $shelter_pet_table      = "shelter_pets"; // shelter pets table 
	private $pet_type_table         = "pet_types"; 	// pet type table
	private $user_table             = "users";      //user table
	private $wishlist_table		    = "wishlists";      // wishlists table 
	private $product_table			= "products";       // products table
	private $pet_sizes_table		= "pet_sizes";
	private $wishtype_pet = 2;
	private $wishtype_product=1;
	public function __construct()
	{
		
	}
	
	
	
	/**
	* Function to listing wishlist products
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function wishlist_item_listing($param)
	{
	
		$start =0;
    	$limit = -1;
    	$wishType =0;
    	
    	if(isset($param['wishType']))
    	$wishType = $param['wishType'];
    	
    	if(isset($param['start']))
    	$start =$param['start'];
    	
    	if(isset($param['limit']))
    	$limit=$param['limit'];
	
		if($start!=0){
		$start = (($start-1) * $limit);
		}  
		if($limit >0 )
		{
			//Apply limit only when it is requested
			$this->db->limit($limit, $start);
		}	
		if($wishType== $this->wishtype_pet)
		{
			
			$result['pets'] = $this->getPetWishList($param);
			$result['productList'] = array();
			$result['message'] = "success";
			$result['status'] = 200;
		}else if($wishType== $this->wishtype_product)
		{
			
		
			$result['productList'] = $this->getProductWishList($param);
			$result['pets'] = array();
			$result['message'] = "success";
			$result['status'] = 200;

		
		
		}
		else
		{
			
			$result['pets'] = $this->getPetWishList($param);
			$result['productList'] = $this->getProductWishList($param);
			$result['message'] = "success";
			$result['status'] = 200;
		}
		return $result;	
	}
	
	
	private function getPetWishList($param)
	{
		$start =0;
    	$limit = -1;
    	$wishType =0;
    	
    	if(isset($param['wishType']))
    	$wishType = $param['wishType'];
    	
    	if(isset($param['start']))
    	$start =$param['start'];
    	
    	if(isset($param['limit']))
    	$limit=$param['limit'];
	
		if($start!=0){
		$start = (($start-1) * $limit);
		}  
		if($limit >0 )
		{
			//Apply limit only when it is requested
			$this->db->limit($limit, $start);
		}
			
			/*
			$this->db->select("{$this->pet_table}.petId,petName, petScreenName, {$this->pet_table}.userId,breed, aboutPet, petImage,petImageThumb,aboutPet,isActive,{$this->pet_type_table}.petType");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');
			$this->db->join($this->wishlist_table,"{$this->wishlist_table}.objectId = .". $this->pet_table.'.petId');
			$this->db->where("{$this->wishlist_table}.userId",$param['userId']);
			$this->db->where("{$this->wishlist_table}.wishType",$this->wishtype_pet);
			
			*/
			
			$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,age, breed, sex, shelterPetImage,shelterPetImageThumb,aboutShelterPet,{$this->pet_type_table}.petType,{$this->user_table}.userToken,screenName, emailId, profileImage,companyName,charityTaxId,contactEmail, userAddress, userCity, userStreet, userState, userWeblink,userZipcode, aboutMe, fullName, groupId,  {$this->pet_sizes_table}.size");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
			$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');
			$this->db->join($this->pet_sizes_table,"{$this->pet_sizes_table}.sizeId = .". $this->shelter_pet_table.'.sizeId');
			$this->db->join($this->wishlist_table,"{$this->wishlist_table}.objectId = .". $this->shelter_pet_table.'.shelterPetId');
			$this->db->where("{$this->wishlist_table}.userId",$param['userId']);
			$this->db->where("{$this->wishlist_table}.wishType",$this->wishtype_pet);
			
			
			
			$response = $this->db->get($this->shelter_pet_table); 
			return $response->result_array();
	}
	
	private function getProductWishList($param)
	{
	
		$start =0;
    	$limit = -1;
    	$wishType =0;
    	
    	if(isset($param['wishType']))
    	$wishType = $param['wishType'];
    	
    	if(isset($param['start']))
    	$start =$param['start'];
    	
    	if(isset($param['limit']))
    	$limit=$param['limit'];
	
		if($start!=0){
		$start = (($start-1) * $limit);
		}  
		if($limit >0 )
		{
			//Apply limit only when it is requested
			$this->db->limit($limit, $start);
		}
			$sql = "";		
			$sql = "SELECT products.productId, productName, productDescription, productPrice, productImage, productImageThumb,productCreateTime
			FROM products
			JOIN wishlists on(products.productId = wishlists.objectId and wishlists.userId='".$param['userId']."')
			WHERE products.productSoldQuantity<products.productQuantity			
			order by wishlists.wId desc limit ".$start.",".$limit;
		
			$response = $this->db->query($sql);
			//echo $this->db->last_query();
			if($response->num_rows()>0)
			{
			return $response->result();
			}
			else
			{
			return array();
			}
	}
	
	
	/**
	* Function to add_product_to_wishlist
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_to_wishlist($param)
	{
		if($this->check_item_already_added_to_wishlist($param))
		{
			$result['message'] = "already in wishlist ";
				$result['flag'] = 1;
				$result['status'] = 200;
		}
		else
		{	
			$fields = array();
			$fields['objectId'] = $param['id'];
			$fields['userId'] = $param['userId'];
			$fields['wishType'] = $param['wishType'];
			$fields['wishlistCreateTime'] = date('Y-m-d H:i:s');
			$res_ins = $this->db->insert($this->wishlist_table, $fields);
			if($res_ins){
				$result['message'] = "Added to wishlist successfully.";
			    $result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}			
		}
		return $result;
	}
	
	public function delete_from_wishlist($param)
	{
	        $this->db->where('objectId', $param['id']);
			$this->db->where('userId', $param['userId']);
			$this->db->where('wishType', $param['wishType']);
			$res = $this->db->delete($this->wishlist_table);
			if($res){
				$result['message'] = "Removed from wishlist successfully.";
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
			return $result;
	}		
	/**
	* Function to check product already added to wishlist
	*
	* @author	KS
	* @param	array
	* @return	boolean
	*/
    public function check_item_already_added_to_wishlist($param) 
	{
		$flag = FALSE;
		$this->db->where('objectId', $param['id']);
		$this->db->where('userId', $param['userId']);
		$this->db->where('wishType', $param['wishType']);
		if($this->db->count_all_results($this->wishlist_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	
	
} 