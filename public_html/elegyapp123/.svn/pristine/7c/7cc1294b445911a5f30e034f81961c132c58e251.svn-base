<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Pet_model extends CI_Model {

	private $pet_table		        = "pets"; 		// main model table 
	private $shelter_pet_table      = "shelter_pets"; // shelter pets table 
	private $pet_type_table         = "pet_types"; 	// pet type table
	private $pet_size_table         = "pet_sizes"; 	// pet type table
	private $star_pet_table	        = "star_pets"; 	// star pet table
    private $follower_table	        = "followers"; 	// follower table
	private $post_table             = "posts";      // post table
    private $user_table             = "users";      //user table
	private $user_device_table		= "user_devices"; 	// device table
	private $user_location_table	= "user_locations"; // user location table
	private $user_setting_table		= "user_settings"; 	// setting table
	private $save_pet_table		    = "save_pets"; 	// save pet table
    private $pet_tag_table		    = "pet_tags"; 	//  pet Tags table
    private $pet_sizes_table		= "pet_sizes";
	private $pet_tags_table			= "pet_tags";
	
	
	public function __construct()
	{
		$this->load->model('User_model');
	}
	
	/**
	* Function to get single user's pets
	*
	* @author	KS
	* @param	array
	* @return	object array
	*/
	public function get_user_pets($param)
	{
		$this->db->order_by("{$this->pet_table}.petName", "asc");
		$this->db->select("{$this->pet_table}.petTypeId,petId,petName,petScreenName,petImage,petImageThumb,aboutPet,{$this->pet_type_table}.petType");	
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');		
		$this->db->where("{$this->pet_table}.userId",$param['userId']);
		$response = $this->db->get($this->pet_table);
		return $response->result();
	}
	
	/**
	* Function to get all pet types
	*
	* @author	KS
	* @param	none
	* @return	array
	*/	
	public function get_pet_types()
	{
		$response = $this->db->get($this->pet_type_table);
		if($response->num_rows()>0)
		{
			$result['petTypes'] = $response->result();
			$result['status'] = 200;
		}
		else
		{
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to get active pet account detail
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_active_pet_detail($param)
	{
		$this->db->select("{$this->pet_table}.petTypeId,petId,petName,petScreenName,petImage,petImageThumb,isActive,aboutPet,{$this->pet_type_table}.petType");	
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');		
		$this->db->where("{$this->pet_table}.userId",$param['userId']);
		$this->db->where("{$this->pet_table}.isActive",1);
		$response = $this->db->get($this->pet_table);
		return $response->row();
	}
	
	/**
	* Function to add single pet for single user
	*
	* @author	KS
	* @param	none
	* @return	array
	*/	
	public function add_pet($param)
	{
		$fields = array();
		$fields['userId'] = $param['userId'];
		$fields['breed'] = $param['breed'];
		$fields['petName'] = $param['petName'];
		$fields['petTypeId'] = $param['petTypeId'];
		$fields['petCreateTime'] = date('Y-m-d H:i:s');
		if(isset($param['aboutPet'])){
		$fields['aboutPet'] = $param['aboutPet'];
		}
		
		// set unique pet screen name
		$replacePetName = str_replace(' ', '', $fields['petName']);
		$fields['petScreenName'] = $replacePetName.randomToken(4, false, true, false);
		if($this->check_pet_screen_name($fields['petScreenName'])){
			$fields['petScreenName'] = $this->getNewPetScreenNameToken($replacePetName);
		}
		
		if(!empty($_FILES['petImage']['name'])){
			$target_path = PET_IMAGE_PATH;

			$target_path = $target_path .time().'_'.basename(str_replace(' ', '_', $_FILES['petImage']['name'])); 

			$img_resp = move_uploaded_file($_FILES['petImage']['tmp_name'], $target_path);
			if($img_resp){
				$target_thumb_path = PET_IMAGE_THUMB_PATH.time().str_replace(' ', '_', $_FILES['petImage']['name']);
				createThumbs($target_path,$target_thumb_path,100);
				if(file_exists($target_thumb_path)){
					$fields['petImageThumb'] = $target_thumb_path;
				}else{
					$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
				$fields['petImage'] = $target_path;
			}else{
				$fields['petImage'] = PET_IMAGE_PATH."default.png";
				$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
			}
		}else{
			$fields['petImage'] = PET_IMAGE_PATH."default.png";
			$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}		
		
		$res_ins = $this->db->insert($this->pet_table, $fields);
		if($res_ins){
			$result['petInfo'] = $this->get_user_pets($fields);
			foreach($result['petInfo'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to generate and check usertoken in users table then return unique token
	*
	* @author	KS
	* @param	none
	* @return	variable
	*/	
	public function getNewPetScreenNameToken($replacePetName) 
	{
		$petScreenNameToken = $replacePetName.randomToken(4, false, true, false);
		if($this->check_pet_screen_name($petScreenNameToken)){
			$this->getNewPetScreenNameToken($replacePetName);
		}		
		return $petScreenNameToken;
    }
	
	/**
	* Function to check pet screen name in pets table
	*
	* @author	KS
	* @param	variable
	* @return	boolean
	*/
    public function check_pet_screen_name($petScreenName) 
	{
		$flag = FALSE;
    	if (empty($petScreenName))
		{
			return $flag;
		}	
		$this->db->where('petScreenName', $petScreenName);
		if($this->db->count_all_results($this->pet_table) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to get single pet profile data
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function get_pet_profile($param)
	{
		//set active account for pet
		$sql_ins = "";
		$sql_ins = "update ".$this->pet_table." SET isActive='0' where userId='".$param['userId']."'";	
		$res_ins = $this->db->query($sql_ins);
		$sql_ins = "";
		$sql_ins = "update ".$this->pet_table." SET isActive='1' where userId='".$param['userId']."' and petId='".$param['petId']."'";	
		$res_ins = $this->db->query($sql_ins);
		
		$this->db->select("{$this->pet_table}.petTypeId,petId,{$this->pet_table}.userId,petName,petScreenName,petImage,petImageThumb,aboutPet,{$this->pet_type_table}.petType");	
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');		
		$this->db->where("{$this->pet_table}.userId",$param['userId']);
		$this->db->where("{$this->pet_table}.petId",$param['petId']);
		$response = $this->db->get($this->pet_table);
		if($response->num_rows()>0)
		{
			$result['petProfile'] = $response->row();
			$result['petProfile']->petImage = base_url().$result['petProfile']->petImage;
			$result['petProfile']->petImageThumb = base_url().$result['petProfile']->petImageThumb;
			$result['starsCount'] = $this->pet_stars_count($param);
			$result['picturesCount'] = $this->picture_count($param);
			$result['followersCount'] = $this->follower_count($param);
			$result['followingCount'] = $this->following_count($param);
			if(isset($param['loggedUserId']) && $param['loggedUserId']!=''){
				$fields['userId2'] = $result['petProfile']->userId;
				$fields['userId'] = $param['loggedUserId'];
				$followResult = $this->User_model->check_user_isfollowed($fields);
				//pr($followResult);
				if($followResult['status']==200){
					$result['isFollowed'] = 1;
				}else{
					$result['isFollowed'] = 0;
				}
			}
			$this->load->model('Post_model');
			$param['page_index'] = 0;
			$param['page_size'] = 6;
			// // $taggedPhotos = $this->Post_model->get_all_tagged_photos($param);
			// // if(empty($taggedPhotos['taggedPhotos'])){
				// // $taggedPhotos['taggedPhotos'] = array();
			// // }
			// // if(empty($taggedPhotos['countTaggedPhotos'])){
				// // $taggedPhotos['countTaggedPhotos'] = 0;
			// // }
			// // $result['taggedPhotos'] = $taggedPhotos['taggedPhotos'];
			// // $result['countTaggedPhotos'] = $taggedPhotos['countTaggedPhotos'];
			$userPhotos = $this->Post_model->get_user_posts($param);
			if(empty($userPhotos['posts'])){
				$userPhotos['posts'] = array();
			}
			$result['userLocation'] = $this->User_model->get_user_location($param['userId']);
			$result['userPhotos'] = $userPhotos['posts'];
			$result['badgeCount'] = $this->User_model->get_user_badge_count($param);
			$result['message'] = "success";
			$result['status'] = 200;
		}
		else
		{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to count total star of a pet
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function pet_stars_count($param) 
	{
		$flag = FALSE;
		$this->db->where('petId', $param['petId']);
		$starCounts = $this->db->count_all_results($this->star_pet_table);
		return $starCounts;
    }
	
	/**
	* Function to count follower
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function follower_count($param) 
	{
		$flag = FALSE;
		$this->db->where('followerId', $param['userId']);
		$followerCounts = $this->db->count_all_results($this->follower_table);
		return $followerCounts;
    }
	
	/**
	* Function to count following
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function following_count($param) 
	{
		$flag = FALSE;
		$this->db->where('followingId', $param['userId']);
		$followingCounts = $this->db->count_all_results($this->follower_table);
		return $followingCounts;
    }
	
	/**
	* Function to count total pictures
	*
	* @author	KS
	* @param	array
	* @return	variable
	*/
    public function picture_count($param) 
	{
		$flag = FALSE;
		$this->db->where('userId', $param['userId']);
		$this->db->where('petId', $param['petId']);
		$pictureCounts = $this->db->count_all_results($this->post_table);
		return $pictureCounts;
    }

	/**
	* Function to list shelter pets for save a pet page
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function shelter_pets($param)
	{ 
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		if(isset($param['text_search'])) {
			$this->db->like("{$this->user_table}.screenName", $param['text_search']);	
		}
		
		$this->db->limit($pageSize, $page);
		$this->db->order_by("{$this->shelter_pet_table}.shelterPetId", "desc");
		$this->db->select("{$this->user_table}.userId,screenName,aboutMe,userAddress,userPhoneNumber,userCity,contactEmail,userWebLink,{$this->pet_sizes_table}.size,{$this->shelter_pet_table}.shelterPetId,shelterPetName,age,breed,sex,shelterPetImage,shelterPetImageThumb,aboutShelterPet");
        $this->db->join($this->pet_sizes_table,"{$this->pet_sizes_table}.sizeId = .". $this->shelter_pet_table.'.sizeId');		
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');			
		$this->db->where("{$this->user_table}.isActive",1);
		//$this->db->where("{$this->user_table}.isApproved",1);
		$this->db->where("{$this->user_table}.deleted",0);
		$this->db->where("{$this->user_table}.groupId",3);
		$this->db->where("{$this->shelter_pet_table}.isAdopted",0);
		$this->db->where("{$this->shelter_pet_table}.savePetCount <",1);
		$response = $this->db->get($this->shelter_pet_table);
		//echo $this->db->last_query();die;
		if($response->num_rows()>0){
			$result['petList'] = $response->result();
			foreach($result['petList'] as $key=>$value){				
				$value->shelterPetImage = base_url().$value->shelterPetImage;
				$value->shelterPetImageThumb = base_url().$value->shelterPetImageThumb;
				//$value->aboutShelterPet = stripslashes($value->aboutShelterPet);
				if(empty($value->userLatitute)){
					$value->userLatitute = '';
				}
				if(empty($value->userLongitude)){
					$value->userLongitude = '';
				}				
			}
			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No pet found.";
			$result['status'] = 202;
		}
		
		return $result;	
	}
	
	/**
	* Function to show detail page of save pet
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function save_pet_detail($param)
	{
		$this->db->select("{$this->user_table}.userId,screenName,aboutMe,userWebLink,{$this->shelter_pet_table}.shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet");		
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');			
		$this->db->where("{$this->user_table}.isActive",1);
		//$this->db->where("{$this->user_table}.isApproved",1);
		$this->db->where("{$this->user_table}.deleted",0);
		$this->db->where("{$this->user_table}.groupId",3);
		$this->db->where("{$this->shelter_pet_table}.shelterPetId",$param['shelterPetId']);
		$response = $this->db->get($this->shelter_pet_table);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['petDetail'] = $response->row();							
			$result['petDetail']->shelterPetImage = base_url().$result['petDetail']->shelterPetImage;
			$result['petDetail']->shelterPetImageThumb = base_url().$result['petDetail']->shelterPetImageThumb;
			if(empty($result['petDetail']->userLatitute)){
				$result['petDetail']->userLatitute = '';
			}
			if(empty($result['petDetail']->userLongitude)){
				$result['petDetail']->userLongitude = '';
			}			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No pet found.";
			$result['status'] = 202;
		}
		
		return $result;	
	}
	
	/**
	* Function to save pet
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function save_pet($param)
	{
		$fields = array();
		$fields['userId'] = $param['userId'];
		$fields['shelterPetId'] = $param['shelterPetId'];
		$fields['savePetCreateTime'] = date('Y-m-d H:i:s');
		$this->db->where('userId', $fields['userId']);
		$this->db->where('shelterPetId', $fields['shelterPetId']);
		if($this->db->count_all_results($this->save_pet_table) > 0){
			$result['message'] = "Already saved.";
			$result['status'] = 202;
		}else{
			$res_ins = $this->db->insert($this->save_pet_table, $fields);
			if($res_ins){
				$sql_sel = "";
				$sql_sel = "UPDATE ".$this->shelter_pet_table." SET savePetCount=savePetCount+1 WHERE shelterPetId='".$fields['shelterPetId']."'";
				$res = $this->db->query($sql_sel);
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}
		return $result;
	}
	
	/**
	* Function to Counting the number of pets
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function record_count($searchStr = NULL) 
	{
                if(isset($searchStr)){
                $this->db->like('petName', $searchStr,'after');
                $this->db->or_like('petType', $searchStr,'after');
                }
	            $this->db->where("{$this->user_table}.isBlocked",0);
                $this->db->select("{$this->pet_table}.petTypeId,petId,petName,petImage,petImageThumb,aboutPet,{$this->pet_type_table}.petType,,{$this->user_table}.userToken,screenName");
                $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');
				$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->pet_table.'.userId');
                $count = $this->db->count_all_results($this->pet_table);
                //echo $this->db->last_query();
                return $count;
    }
	
	/**
	* Function to LISTING
	*
	* @author        Shashank
	* @param         var,var,var
	* @return        array
	*/
    public function all_pets($limit, $start,$searchStr)
	{        
		if(isset($searchStr)){
			$this->db->like('petName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("petName", "asc");
		$this->db->where("{$this->user_table}.isBlocked",0);
		$this->db->select("{$this->pet_table}.petTypeId,petId,petName,petImage,petImageThumb,aboutPet,{$this->pet_type_table}.petType,,{$this->user_table}.userToken,screenName");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->pet_table.'.userId');                        
		$response = $this->db->get($this->pet_table);                
		//echo $this->db->last_query();
		return $response->result_array();
	}
	
	/**
	* Function to check the user 
	*
	* @author        Shashank
	* @param         var,array
	* @return        array
	*/ 
	public function check_pet_id($id,$param) 
	{
		$result = array();
		$flag = FALSE;
		$this->db->where('shelterPetId',$id);
		$this->db->where('userId', $param['userId']);
		if($this->db->count_all_results($this->shelter_pet_table) > 0){
			$flag = TRUE;
		}
		var_dump($flag);
		if($flag){
				$result['message'] = "User token is valid.";
				$result['status'] = 200;
		}else{
				$result['message'] = "User token is not valid.";
				$result['status'] = 202;
		}
		return $result;
    } 
	
	/**
	* Function to deleting the pet
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function delete($id)
    {
		return $this->db->delete($this->pet_table, array('petId' => $id));
    }
	
	/**
	* Function to update the pet
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_pet($param)
	{
		$fields = array();
		$fields1=array();
		//pr($param);
		$fields['userId'] = $param['userId'];
		$fields['petTypeId'] = $param['petType'];
		$fields['petName'] = $param['petName'];
		if(isset($param['aboutPet'])){
		$fields['aboutPet'] = $param['aboutPet'];
		}
		   if(!empty($_FILES['petImage']['name'])){
				$target_path = PET_IMAGE_PATH;
				$target_path = $target_path .time().'_'.basename(str_replace(' ', '_', $_FILES['petImage']['name'])); 
				$img_resp = move_uploaded_file($_FILES['petImage']['tmp_name'], $target_path);
				//var_dump($img_resp);
				//die();
				if($img_resp){
						$target_thumb_path = PET_IMAGE_THUMB_PATH.time().str_replace(' ', '_', $_FILES['petImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['petImageThumb'] = $target_thumb_path;
						}else{
								$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
						}
						$fields['petImage'] = $target_path;
				}else{
						$fields['petImage'] = PET_IMAGE_PATH."default.png";
						$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				//$fields['petImage'] = PET_IMAGE_PATH."default.png";
				//$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}                
		$res_ins=$this->db->where('petId',$param['petId']);
		$res_ins = $this->db->update($this->pet_table, $fields);
		if($res_ins){
				$result['petInfo'] = $this->get_user_pets($fields);
				foreach($result['petInfo'] as $key=>$value){
						$value->petImage = base_url().$value->petImage;
						$value->petImageThumb = base_url().$value->petImageThumb;
				}
				$result['message'] = "success";
				$result['status'] = 200;
		}else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
		}
		return $result;
	   
	}
	
	/**
	* Function to pet detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function pet_detail($id)
    {        
        if(isset($id))
        {
			$this->db->select("{$this->pet_table}.petTypeId,petId,petName,petImage,petImageThumb,aboutPet,{$this->pet_type_table}.petType,{$this->user_table}.userToken,screenName,");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');
			$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->pet_table.'.userId');
			$this->db->where('petId',$id);                
			$response = $this->db->get($this->pet_table);                
			//echo $this->db->last_query();
			return $response->result_array();
        }
    }
	
	/**
	* Function to get pet Type
	*
	* @author       Shashank
	* @param        none
	* @return       array
	*/
	public function get_petType()
	{
		$this->db->select("{$this->pet_type_table}.petType, {$this->pet_type_table}.petTypeId");
		$query = $this->db->get($this->pet_type_table);
		$petlist = array();
		$petlist[''] = 'Select pet';
		if ($query->num_rows() > 0) {
				foreach($query->result() as $petType) {
						$petlist[$petType->petTypeId] = $petType->petType;
				}
		}
		return $petlist;
	}
	
	/**
	* Function to get pet Size
	*
	* @author       Shashank
	* @param        none
	* @return       array
	*/
	public function get_petSize()
	{
		$this->db->select("{$this->pet_size_table}.size, {$this->pet_size_table}.sizeId");
		$query = $this->db->get($this->pet_size_table);
		$sizelist = array();
		$sizelist[''] = 'Select Size';
		if ($query->num_rows() > 0) {
				foreach($query->result() as $petSize) {
						$sizelist[$petSize->sizeId] = $petSize->size;
				}
		}
		return $sizelist;
	}
	
	/**
    * Function to add single pet for single user
	*
	* @author       Shashank
	* @param        array
	* @return       array
	*/ 
	public function add_pet_web($param)
    {
		$fields = array();
		$fields['userId'] = $param['userId'];
		$fields['petName'] = $param['petName'];
		$fields['petTypeId'] = $param['petType'];
		$fields['petCreateTime'] = date('Y-m-d H:i:s');
		if(isset($param['aboutPet'])){
		$fields['aboutPet'] = $param['aboutPet'];
		}
		if(!empty($_FILES['petImage']['name'])){
				$target_path = PET_IMAGE_PATH;
				$target_path = $target_path .time().'_'.basename( $_FILES['petImage']['name']); 
				$img_resp = move_uploaded_file($_FILES['petImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = PET_IMAGE_THUMB_PATH.time().$_FILES['petImage']['name'];
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['petImageThumb'] = $target_thumb_path;
						}else{
								$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
						}
						$fields['petImage'] = $target_path;
				}else{
						$fields['petImage'] = PET_IMAGE_PATH."default.png";
						$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				$fields['petImage'] = PET_IMAGE_PATH."default.png";
				$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}                
		$res_ins = $this->db->insert($this->pet_table, $fields);
		if($res_ins){
			$result['petInfo'] = $this->get_user_pets($fields);
			foreach($result['petInfo'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
	    }else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
	    }
		return $result;
    }
	
	/**
	* Function to Counting the number of Shelter pets
	*
	* @author        Shashank
	* @param         var,var,var
	* @return        array
	*/
    public function record_count_shelter_pets_active($searchStr = NULL,$id,$groupId) 
	{
            if($groupId==1 && $searchStr == NULL)
			{ 
			 if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.isAdopted",0);
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count; 	
			  }
		     elseif($groupId==1 && $searchStr != NULL)
			 {
			    if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.isAdopted",0);  
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count;
			  }
		      elseif($groupId==3 && $searchStr != NULL)
			  {	  
		      if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.userId",$id);   
			  $this->db->where("{$this->shelter_pet_table}.isAdopted",0);
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count;
			  }
		      elseif($groupId==3 && $searchStr == NULL)
		      {   
		      $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.userId",$id);   
			  $this->db->where("{$this->shelter_pet_table}.isAdopted",0);
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
			  //pr($count);
			  return $count;
		      }
    
	 }

	
	/**
	* Function to LISTING the shelter pets
	*
	* @author        Shashank
	* @param         var,var,var,var,var
	* @return        array
	*/
    public function all_shelter_pets_active($limit, $start,$searchStr,$id,$groupId)
	{        
	    if($groupId==1 && $searchStr == NULL)
		 {
		if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("savePetCount", "desc");
		$this->db->where("{$this->shelter_pet_table}.isAdopted",0);
		$this->db->where("{$this->user_table}.isBlocked",0);
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		
		$response = $this->db->get($this->shelter_pet_table);                
		//echo $this->db->last_query();
		
		return $response->result_array();
		}
		elseif($groupId==1 && $searchStr != NULL)
		{
			if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
			}

			if($start!=0){
					$start = (($start-1) * $limit);
			}  

			$this->db->limit($limit, $start);
			$this->db->order_by("savePetCount", "desc");
			$this->db->where("{$this->shelter_pet_table}.isAdopted",0);
			$this->db->where("{$this->user_table}.isBlocked",0);
			$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
			$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
			$response = $this->db->get($this->shelter_pet_table);                
			//echo $this->db->last_query();
			return $response->result_array();
		}	
		elseif($groupId==3 && $searchStr != NULL)
		{
			if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("savePetCount", "desc");
		$this->db->where("{$this->shelter_pet_table}.isAdopted",0);
		$this->db->where("{$this->user_table}.isBlocked",0);
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,{$this->user_table}.userId,screenName,emailId,userToken");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		$this->db->where("{$this->shelter_pet_table}.userId",$id); 
		$response = $this->db->get($this->shelter_pet_table);                
		//echo $this->db->last_query();
		return $response->result_array();
		}	
		elseif($groupId==3 && $searchStr == NULL)
		{
		$this->db->order_by("savePetCount", "desc");
		$this->db->where("{$this->shelter_pet_table}.isAdopted",0);
		$this->db->where("{$this->user_table}.isBlocked",0);
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		$this->db->where("{$this->shelter_pet_table}.userId",$id); 

		$response = $this->db->get($this->shelter_pet_table);  
		
		return $response->result_array();
		}
	}
	
	
	/**
	* Function to Counting the number of adopted Shelter pets
	*
	* @author        Shashank
	* @param         var,var,var
	* @return        array
	*/
    public function record_count_shelter_pets_adopted($searchStr = NULL,$id,$groupId) 
	{
            if($groupId==1 && $searchStr == NULL)
			{ 
		      if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.isAdopted",1); 
			  $this->db->where("{$this->user_table}.isBlocked",0);			  
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count; 	
			  }
		     elseif($groupId==1 && $searchStr != NULL)
			 {
			    if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.isAdopted",1);  
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count;
			  }
		      elseif($groupId==3 && $searchStr != NULL)
			  {	  
		       if(isset($searchStr) && !empty($searchStr)){
                    $this->db->like('shelterPetName', $searchStr,'after');
                    $this->db->or_like('petType', $searchStr,'after');
              }
              $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.userId",$id);  
			  $this->db->where("{$this->shelter_pet_table}.isAdopted",1);
			  $this->db->where("{$this->user_table}.isBlocked",0);
		      $count = $this->db->count_all_results($this->shelter_pet_table);
		      //pr($count);
              //echo $this->db->last_query();
              return $count;
			  }
		      elseif($groupId==3 && $searchStr == NULL)
		      {   
		      $this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,emailId,userToken,");
		      $this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		      $this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		      $this->db->where("{$this->shelter_pet_table}.userId",$id); 
			  $this->db->where("{$this->shelter_pet_table}.isAdopted",1);
              $this->db->where("{$this->user_table}.isBlocked",0);			  
		      $count = $this->db->count_all_results($this->shelter_pet_table);
			  //pr($count);
			  return $count;
		      }
    
	 }

	
	/**
	* Function to LISTING the adopted shelter pets 
	*
	* @author        Shashank
	* @param         var,var,var,var,var
	* @return        array
	*/
    public function all_shelter_pets_adopted($limit, $start,$searchStr,$id,$groupId)
	{        
	    if($groupId==1 && $searchStr == NULL)
		 {
		if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("savePetCount", "desc");
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		$this->db->where("{$this->shelter_pet_table}.isAdopted",1);
		$this->db->where("{$this->user_table}.isBlocked",0);
		$response = $this->db->get($this->shelter_pet_table);                
		//echo $this->db->last_query();
		return $response->result_array();
		}
		elseif($groupId==1 && $searchStr != NULL)
		{
			if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
			}

			if($start!=0){
					$start = (($start-1) * $limit);
			}  

			$this->db->limit($limit, $start);
			$this->db->order_by("savePetCount", "desc");
			$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
			$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
			$this->db->where("{$this->shelter_pet_table}.isAdopted",1);
			$this->db->where("{$this->user_table}.isBlocked",0);
			$response = $this->db->get($this->shelter_pet_table);                
			//echo $this->db->last_query();
			return $response->result_array();
		}	
		elseif($groupId==3 && $searchStr != NULL)
		{
			if(isset($searchStr) && !empty($searchStr)){
			$this->db->like('shelterPetName', $searchStr,'after');
			$this->db->or_like('petType', $searchStr,'after');
		}
		
		if($start!=0){
				$start = (($start-1) * $limit);
		}  
	   
		$this->db->limit($limit, $start);
		$this->db->order_by("savePetCount", "desc");
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,{$this->user_table}.userId,screenName,emailId,userToken");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		$this->db->where("{$this->shelter_pet_table}.userId",$id); 
		$this->db->where("{$this->shelter_pet_table}.isAdopted",1);
		$this->db->where("{$this->user_table}.isBlocked",0);
		$response = $this->db->get($this->shelter_pet_table);                
		//echo $this->db->last_query();
		return $response->result_array();
		}	
		elseif($groupId==3 && $searchStr == NULL)
		{
		$this->db->order_by("savePetCount", "desc");
		$this->db->select("{$this->shelter_pet_table}.petTypeId,savePetCount,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,isAdopted,{$this->pet_type_table}.petType,,{$this->user_table}.userId,screenName,emailId,userToken,");
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
		$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');  
		$this->db->where("{$this->shelter_pet_table}.userId",$id);
        $this->db->where("{$this->shelter_pet_table}.isAdopted",1);	
        $this->db->where("{$this->user_table}.isBlocked",0);		
		$response = $this->db->get($this->shelter_pet_table);  
		
		return $response->result_array();
		}
	}
	
	/**
    * Function to add single pet for single shelter
	*
	* @author       Shashank
	* @param        array,var
	* @return       array
	*/ 
	public function add_pet_shelter($param,$fields1,$id)
    {
		
		$fields = array();
		$fields['userId'] = $id;
		$fields['shelterPetName'] = $param['shelterPetName'];
		$fields['petTypeId'] = $param['petType'];
		$fields['sizeId'] = $param['petSize'];
		$fields['age'] = $param['age'];
		$fields['breed'] = $param['breed'];
		$fields['sex'] = $param['sex'];
		$fields['shelterPetCreateTime'] = date('Y-m-d H:i:s');
		if(isset($param['aboutShelterPet'])){
		$fields['aboutShelterPet'] = $param['aboutShelterPet'];
		}
		if(!empty($_FILES['shelterPetImage']['name'])){
				$target_path = PET_IMAGE_PATH;

			  
				$target_path = $target_path .time().'_'.basename(str_replace(' ', '_', $_FILES['shelterPetImage']['name'])); 

				$img_resp = move_uploaded_file($_FILES['shelterPetImage']['tmp_name'], $target_path);
			    if($img_resp){
						$target_thumb_path = PET_IMAGE_THUMB_PATH.time().str_replace(' ', '_', $_FILES['shelterPetImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['shelterPetImageThumb'] = $target_thumb_path;
						}else{
								$fields['shelterPetImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
						}
						$fields['shelterPetImage'] = $target_path;
				}else{
						$fields['shelterPetImage'] = PET_IMAGE_PATH."default.png";
						$fields['shelterPetImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				$fields['shelterPetImage'] = PET_IMAGE_PATH."default.png";
				$fields['shelterPetImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}                
		$res_ins = $this->db->insert($this->shelter_pet_table, $fields);
		$last_id =$this->db->insert_id();
        $fields['petId'] = $last_id;
		foreach($fields1 as $val)
		{
			$data['petId']=$fields['petId'];
			$data['name']=trim($val);
			$res_ins = $this->db->insert($this->pet_tag_table, $data);
		}
		if($res_ins){
			$result['petInfo'] = $this->get_shelters_pets($fields);
			foreach($result['petInfo'] as $key=>$value){
				$value->shelterPetImage = base_url().$value->shelterPetImage;
				$value->shelterPetImageThumb = base_url().$value->shelterPetImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
	    }else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
	    }
		return $result;
    }
	 /**
	* Function to check the user 
	*
	* @author        Shashank
	* @param         var,array
	* @return        array
	*/ 
	public function check_pet_id_user($id,$param) 
	{
		$result = array();
		$flag = FALSE;
		$this->db->where('PetId',$id);
		$this->db->where('userId', $param['userId']);
		if($this->db->count_all_results($this->pet_table) > 0){
			$flag = TRUE;
		}
		//var_dump($flag);
		if($flag){
				$result['message'] = "User token is valid.";
				$result['status'] = 200;
		}else{
				$result['message'] = "User token is not valid.";
				$result['status'] = 202;
		}
		return $result;
    } 
	 
	/**
	* Function to get single shelter's pets
	*
	* @author	Shashank
	* @param	array
	* @return	object array
	*/
	public function get_shelters_pets($param)
	{
		$this->db->order_by("{$this->shelter_pet_table}.shelterPetName", "asc");
		$this->db->select("{$this->shelter_pet_table}.PetTypeId,shelterPetId,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,{$this->pet_type_table}.petType");	
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');		
		$this->db->where("{$this->shelter_pet_table}.userId",$param['userId']);
		$response = $this->db->get($this->shelter_pet_table);
		return $response->result();
	}
	
	
	/**
	* Function to update shelter pet
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_shelter_pet($param,$fields2)
	{
		$fields = array();
		$fields1=array();
		//pr($param);
		$fields['userId'] = $param['userId'];
		$fields['petTypeId'] = $param['petType'];
		$fields['sizeId'] = $param['petSize'];
		$fields['age'] = $param['age'];
		$fields['sex'] = $param['sex'];
		$fields['breed'] = $param['breed'];
		$fields['shelterPetName'] = $param['shelterPetName'];
		$fields['shelterPetUpdateTime'] = date('Y-m-d H:i:s');
		if(isset($param['aboutShelterPet'])){
		$fields['aboutShelterPet'] = $param['aboutShelterPet'];
		}
		   if(!empty($_FILES['shelterPetImage']['name'])){
				$target_path = PET_IMAGE_PATH;

				$target_path = $target_path .time().'_'.basename(str_replace(' ', '_', $_FILES['shelterPetImage']['name'])); 

				$img_resp = move_uploaded_file($_FILES['shelterPetImage']['tmp_name'], $target_path);
				//var_dump($img_resp);
				//die();
				if($img_resp){
						$target_thumb_path = PET_IMAGE_THUMB_PATH.time().str_replace(' ', '_', $_FILES['shelterPetImage']['name']);
						createThumbs($target_path,$target_thumb_path,100);
						if(file_exists($target_thumb_path)){
								$fields['shelterPetImageThumb'] = $target_thumb_path;
						}else{
								$fields['shelterPetImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
						}
						$fields['shelterPetImage'] = $target_path;
				}else{
						$fields['shelterPetImage'] = PET_IMAGE_PATH."default.png";
						$fields['shelterPetImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
				}
		}else{
				//$fields['petImage'] = PET_IMAGE_PATH."default.png";
				//$fields['petImageThumb'] = PET_IMAGE_THUMB_PATH."default.png";
		}                
		$res_ins=$this->db->where('shelterPetId',$param['shelterPetId']);
		$res_ins = $this->db->update($this->shelter_pet_table, $fields);
		if($res_ins){
			$res_ins = $this->db->delete($this->pet_tag_table, array('petId' =>$param['shelterPetId']));
				if($res_ins)
				{
					foreach($fields2 as $val)
					{
						$data['petId']=$param['shelterPetId'];
						$data['name']=trim($val);
						$res_ins = $this->db->insert($this->pet_tag_table, $data);
					}
				}
				$result['petInfo'] = $this->get_user_pets($fields);
				foreach($result['petInfo'] as $key=>$value){
						$value->shelterPetImage = base_url().$value->shelterPetImage;
						$value->shelterPetImageThumb = base_url().$value->shelterPetImageThumb;
				}
				$result['message'] = "success";
				$result['status'] = 200;
		}else{
				$result['message'] = "Insert query failed.";
				$result['status'] = 202;
		}
		return $result;
	   
	}
	
	/**
	* Function to pet detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function shelter_pet_detail($id)
    {        
        if(isset($id))
        {
			$this->db->select("{$this->shelter_pet_table}.petTypeId,shelterPetId,savePetCount,shelterPetName,shelterPetImage,shelterPetImageThumb,aboutShelterPet,breed,age,sex,sizeId,{$this->pet_type_table}.petType,{$this->user_table}.userToken,screenName");
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->shelter_pet_table.'.petTypeId');
			$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->shelter_pet_table.'.userId');
			$this->db->where('shelterPetId',$id);                
			$response = $this->db->get($this->shelter_pet_table);                
			//echo $this->db->last_query();
			return $response->result_array();
        }
    }
	
	/**
	* Function to deleting the shelter pet
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function shelter_pet_delete($id)
    {
		return $this->db->delete($this->shelter_pet_table, array('shelterPetId' => $id));
    }
	
	/**
	* Function to deleting multiple shelter pet
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
	function delete_mutiple_shelter_pet($id)
    {  		
			$this->db->where_in('shelterPetId',$id);
		    $this->db->delete($this->shelter_pet_table);
    }
	
	/**
	* Function to get the Requested users
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/ 
    function get_requestedUser($id)
	{
		$response=$this->db->select("{$this->user_table}.emailId,screenName");
		$response=$this->db->where('shelterPetId',$id);	
		$response=$this->db->join($this->user_table,"{$this->user_table}.userId = .". $this->save_pet_table	.'.userId');
		$response = $this->db->get($this->save_pet_table);
		//echo $this->db->last_query();
		return $response->result_array();
			
	}	
    /**
	 * Update pet status
	 * @author	Shashank
	 * @param var,var
	 * @return	void
	 */	
	function status_update($id,$data)
    {   
		
		$this->db->where('shelterPetId', $id);
		$this->db->update($this->shelter_pet_table, $data);
		//echo $this->db->last_query();
    }
    
	
	/**
	 * get tag name
	 * @author	Shashank
	 * @param var,var
	 * @return	void
	 */
	function get_pet_tags($id)
	{
		$response=$this->db->select("{$this->pet_tag_table}.name");
		$response=$this->db->where('petId', $id);
		$response=$this->db->get($this->pet_tag_table);
		return $response->result_array();
	}

    
    
      /**
	 * search pets in shelters
	 * @author	
	 * @param data
	 * @return	result
	 */	
    function search_shelter_pets($data)
    {
    	$radius=-1;
    	$start =0;
    	$limit = -1;
    	$userLatitude=0.0;
    	$userLongitude=0.0;
    	$keyword="";
    	
    	if(isset($data['keyword']))
    	$keyword = $data['keyword'];
    	
    	if(isset($data['start']))
    	$start =$data['start'];
    	
    	if(isset($data['limit']))
    	$limit=$data['limit'];
    	// Todo: Apply radius filter.
    	
    	
    	
    	if(isset($data['radius']))
    	$radius = $data['radius'];  
    	
    	
    	if(isset($data['userLatitude']))
    	$userLatitude = $data['userLatitude'];
    	
    	if(isset($data['userLongitude']))
    	$userLongitude = $data['userLongitude'];
    	
    	
    	
			if($start!=0){
					$start = (($start-1) * $limit);
			} 
			
			
			
			
			$sql  ='SELECT `shelter_pets`.`petTypeId`, `savePetCount`, `shelterPetId`, `shelterPetName`, `age`, `breed`, `sex`, `shelterPetImage`, `shelterPetImageThumb`, `aboutShelterPet`, `pet_types`.`petType`, 
			((ACOS( SIN( '.$userLatitude.' * PI( ) /180 ) * SIN( user_locations.userLatitute * PI( ) /180 ) 
 			+ COS( '.$userLatitude.' * PI( ) /180 ) * COS( user_locations.userLatitute * PI( ) /180 ) 
			 * COS(( '.$userLongitude.' - 
 			user_locations.userLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) AS distance, `users`.`userToken`, `screenName`, `emailId`, `profileImage`, `companyName`, `charityTaxId`, `contactEmail`, `userAddress`, `userCity`, `userStreet`, `userState`, `userWeblink`, `userZipcode`, `aboutMe`, `fullName`, `groupId`, `pet_sizes`.`size`
			FROM (`shelter_pets`)
			JOIN `pet_types` ON `pet_types`.`petTypeId` = .`shelter_pets`.`petTypeId`
			JOIN `user_locations` ON `user_locations`.`userId` = .`shelter_pets`.`userId`
			JOIN `users` ON `users`.`userId` = .`shelter_pets`.`userId`
			JOIN `pet_sizes` ON `pet_sizes`.`sizeId` = .`shelter_pets`.`sizeId`
			WHERE  `savePetCount` < 1 and `isAdopted` =0  and (`shelterPetName` like  "%'.$keyword.'%"
			OR `petType` like  "'.$keyword.'%"
			OR `shelterPetId` IN (select `petId` from pet_tags where `name` like "%'.$keyword.'%"))';
			if($radius>0)
			{
			$sql = $sql.' and ((ACOS( SIN( '.$userLatitude.' * PI( ) /180 ) * SIN( user_locations.userLatitute * PI( ) /180 ) 
			+ COS( '.$userLatitude.' * PI( ) /180 ) * COS( user_locations.userLatitute * PI( ) /180 ) 
 			* COS(( '.$userLongitude.' - 
 			user_locations.userLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) <' .$radius;
			}
			
			
			if($limit >0 )
			$sql = $sql .' LIMIT '.$start. ', '.$limit;
			
			
			$response = $this->db->query($sql);  
			$result['pets'] = $response->result_array();
			$result['message'] = "success";
			$result['status'] = 200;
			
			return $result;
		}
			
			
    
    
    /**
	 * search breeds in pets table or shelter table
	 * @author	
	 * @param data
	 * @return	result
	 */	
    function breeds($data)
    {
    	
    	  	
    	$this->db->distinct();
    	if(isset($data['searchterm'])){
			$this->db->like('breed', $data['searchterm'],'after');
		}
    	if(isset($data['searchInShelter']) && $data['searchInShelter'] ==1)
    	{
    	$this->db->select("{$this->shelter_pet_table}.breed");
    	$query = $this->db->get($this->shelter_pet_table);
    	}
    	else{
    	$this->db->select("{$this->pet_table}.breed");
    	$query = $this->db->get($this->pet_table);
    	}
		
		$breedList = array();
		if ($query->num_rows() > 0) {
				foreach($query->result() as $breeds) {
						array_push($breedList,$breeds->breed);
				}
			$result['breeds'] = $breedList;
			$result['message'] = "success";
			$result['status'] = 200;
			return $result;
		}else
		return null;
		
		
    }
    
    
    
      /**
	 * search pets in pets table by petName or breed or both
	 * @author	
	 * @param data
	 * @return	result
	 */	
    function pets_listing($data)
    {
    	$start =0;
    	$limit = -1;
    	
    	if(isset($data['petName']))
    	$petName = $data['petName'];
    	
    	if(isset($data['breed']))
    	$breed = $data['breed'];
    	
    	
    	if(isset($data['start']))
    	$start =$data['start'];
    	
    	if(isset($data['limit']))
    	$limit=$data['limit'];
    	
    	
    		if(isset($petName)){
			$this->db->like('PetName', $petName,'after');
			}
			
			if(isset($breed)){
			$this->db->like('breed', $breed,'after');
			}

			if($start!=0){
					$start = (($start-1) * $limit);
			}  
			if($limit >0 )
			{
			//Apply limit only when it is requested
			$this->db->limit($limit, $start);
			}
			$this->db->order_by("petName", "asc");
			
			$this->db->select("{$this->pet_table}.petId,petName, petScreenName, userId,breed, aboutPet, petImage,petImageThumb,aboutPet,isActive,{$this->pet_type_table}.petType");
			
			$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');
			
			$response = $this->db->get($this->pet_table);                
			//echo $this->db->last_query();
			$result['pets'] = $response->result_array();
			$result['message'] = "success";
			$result['status'] = 200;
			return $result;
			
			
			
    }

}


