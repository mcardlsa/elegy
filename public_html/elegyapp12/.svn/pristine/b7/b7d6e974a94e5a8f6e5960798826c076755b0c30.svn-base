<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class User_model extends CI_Model {

	private $user_table_name		= "users"; 			// main model table 	
	private $user_device_table		= "user_devices"; 	// device table
	private $user_location_table	= "user_locations"; // user location table
	private $user_setting_table		= "user_settings"; 	// setting table
	private $user_detail_table		= "user_details"; 	// user detail table
	private $follower_table		    = "followers"; 	    // follower table
	private $notification_table		= "notifications"; 	// notification table
	private $store_table			= "stores"; 	    // store table
	private $pet_table				= "pets"; 	    	// pet table
	private $pet_type_table			= "pet_types"; 	    // pet_types table
	private $user_badge_table		= "user_badges"; 	// user_badges table
	private $park_table		        = "dog_parks"; 	    // dog_parks table
	
	public function __construct()
	{
		
	}
	
	/**
	* Function to register user
	*
	* @author	KS
	* @param	array
	* @return	array
	*/	
	public function user_register($data)
	{
		if(isset($data['userType'])){
			if($data['userType'] == 'user'){
				$groupId = 2;
			}elseif($data['userType'] == 'shelter'){
				$groupId = 3;
			}else{
				$groupId = 2;  
			}
		} else {
				$groupId = 2;
		}
		if(isset($data['fullName'])){
				$fullName	= $data['fullName'];
		}else{
				$fullName	= '';
		}	
		$emailId 	= $data['emailId'];
		$password	= md5($data['password']);
		$screenName	= $data['screenName'];
		
		
		$sql_img    = !empty($data['profileImage']) ? $data['profileImage'] : "profile_image/default.png";		
		
		$sql_chk = "SELECT * FROM ".$this->user_table_name." WHERE emailId = '$emailId' and deleted=0";
		$res_chk = $this->db->query($sql_chk);
		
		$sql_chk_username = "SELECT * FROM ".$this->user_table_name." WHERE screenName = '$screenName' and deleted=0";
		$res_chk_username = $this->db->query($sql_chk_username);
		
		if(!empty($data['charityTaxId'])){
			$sql_chk = "SELECT * FROM ".$this->user_table_name." WHERE charityTaxId = '".$data['charityTaxId']."' and deleted=0";
			$res_chk2 = $this->db->query($sql_chk);
		}
		
		if($res_chk->num_rows() > 0){
			$result['message'] = "Already registered with this emailId.";
			$result['status'] = 202;	
		}elseif(strlen($screenName) < 8){
			$result['message'] = "Username should be atleast 8 characters.";
			$result['status'] = 202;
		}elseif($res_chk_username->num_rows() > 0){
			$result['message'] = "Username already exist.";
			$result['status'] = 202;
		}elseif(isset($res_chk2) && $res_chk2->num_rows() > 0){
			$result['message'] = "Already registered with this Charity Tax Id.";
			$result['status'] = 202;
		}else{
			$user_fields = array();
			
		if(!empty($data['facebookId'])){
				$user_fields['facebookId']	= $data['facebookId'];
			}
			
			if(!empty($data['twitterId'])){
				$user_fields['twitterId']	= $data['twitterId'];
			}
			
			if(!empty($data['charityTaxId'])){
				$user_fields['charityTaxId'] = $data['charityTaxId'];
			}
			
			if(!empty($data['companyName'])){
				$user_fields['companyName'] = $data['companyName'];
			}
			
			if(isset($data['deviceType']) && $data['deviceType']!=''){
				$deviceType		= $data['deviceType'];
				$deviceToken	= $data['deviceToken'];	
			}
			
			$user_fields['emailId'] = $emailId;
			$user_fields['password'] = $password;
			$user_fields['screenName'] = $screenName;
			$user_fields['fullName'] = $fullName;			
			$user_fields['groupId'] = $groupId;
			$user_fields['profileImage'] = $sql_img;
			$user_fields['userCreateTime'] = date('Y-m-d H:i:s');
			// set unique user token
			$user_fields['userToken'] = randomToken(12, false, true, false);
			if($this->check_user_token($user_fields['userToken'])){
				$user_fields['userToken'] = $this->getNewUserToken();
			}
				
			$res_ins = $this->db->insert($this->user_table_name, $user_fields);
			if($res_ins){
				$userId = $this->db->insert_id();
				
				// make user setting info insertion
				$sql_fav = "INSERT INTO ".$this->user_setting_table." SET userId='$userId', 	usCreateTime='".date('Y-m-d H:i:s')."'";
				$res_fav = $this->db->query($sql_fav);
				
				// insert the deviceToken
				if(isset($data['deviceType']) && $data['deviceType']!=''){
					$this->set_device_token($userId, $deviceType, $deviceToken);
				}		
				
				// update or insert the user location
				if(isset($data['userLatitute']) && $data['userLatitute']!=''){
					$this->set_user_location($userId, $data['userLatitute'], $data['userLongitude']);
				}		
				
				// send activation code 
				$activationCode = $this->send_activation_code($data['emailId']);
				
				$result['activationCode'] = $activationCode;
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}
		return $result;
	}
	
	/**
	* Function to generate and check usertoken in users table then return unique token
	*
	* @author	KS
	* @param	none
	* @return	variable
	*/	
	public function getNewUserToken() 
	{
		$userToken = randomToken(12, false, true, false);
		if($this->check_user_token($userToken)){
			$this->getNewUserToken();
		}		
		return $userToken;
    }
	
	/**
	* Function to check screenname in users table
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_username($param) 
	{
		$result = array();
		$flag = FALSE;
		$this->db->where('screenName', $param['screenName']);
		if($this->db->count_all_results($this->user_table_name) > 0){
			$flag = TRUE;
		}
		
		if($flag){
			$result['message'] = "Username already exist.";
			$result['status'] = 202;
		}else{
			$result['message'] = "Username not exist.";
			$result['status'] = 200;
		}
		return $result;
    }
	
	/**
	* Function to check usertoken validation in users table
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_usertoken_validation($param) 
	{
		$result = array();
		$flag = FALSE;
		$this->db->where('userToken', $param['userToken']);
		if($this->db->count_all_results($this->user_table_name) > 0){
			$flag = TRUE;
		}
		
		if($flag){
			$result['message'] = "Usertoken exist.";
			$result['status'] = 200;
		}else{
			$result['message'] = "Usertoken not valid.";
			$result['status'] = 202;
		}
		return $result;
    }
	
	/**
	* Function to check user is deleted or not
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_useraccount_isdeleted($param) 
	{
		$result = array();
		$flag = FALSE;
		if($param['checkType'] == 'screenName'){
			$this->db->where('screenName', $param['screenName']);
		}else{
			$this->db->where('userToken', $param['userToken']);
		}
		$this->db->where('deleted', 0);
		if($this->db->count_all_results($this->user_table_name) > 0){
			$flag = TRUE;
		}
		
		if($flag){
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "This account no more exist.";
			$result['status'] = 202;
		}
		return $result;
    }
	
	/**
	* Function to check usertoken in users table
	*
	* @author	KS
	* @param	variable
	* @return	boolean
	*/
    public function check_user_token($userToken) 
	{
		$flag = FALSE;
    	if (empty($userToken))
		{
			return $flag;
		}	
		$this->db->where('userToken', $userToken);
		//$this->db->where('isBlocked' , 0);
		if($this->db->count_all_results($this->user_table_name) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to send account activation code to user's email
	*=======
	* @author	KS
	* @param	variable
	* @return	none
	*/
	public function send_activation_code($emailId) 
	{
		$data['activation_code'] = randomToken(8, false, true, false);
		if($this->check_activation_code($data['activation_code'])){
			$data['activation_code'] = $this->getNewActivationToken();
		}
		$data['site_name'] = $this->config->item('site_name', 'user_auth');
		$this->_send_email('activate', $emailId, $data);
		$this->update_activation_code($emailId, $data['activation_code']);
		return $data['activation_code'];
	}
	
	/**
	* Function to generate and check activation code in users table then return unique code
	*
	* @author	KS
	* @param	none
	* @return	code variable
	*/
	public function getNewActivationToken() 
	{
		$activation_code = randomToken(8, false, true, false);
		if($this->check_activation_code($activation_code)){
			$this->getNewActivationToken();
		}		
		return $activation_code;
    }
	
	/**
	* Function to check activation code in users table
	*
	* @author	KS
	* @param	variable
	* @return	boolean
	*/
    public function check_activation_code($activation_code) 
	{
		$flag = FALSE;
    	if (empty($activation_code))
		{
			return $flag;
		}	
		$this->db->where('accountActivationCode', $activation_code);
		if($this->db->count_all_results($this->user_table_name) > 0){
			$flag = TRUE;
		}
		return $flag;
    }
	
	/**
	* Function to send email
	*
	* @author	KS
	* @param	view file type, email, array, subject
	* @return	none
	*/
	public function _send_email($type, $email, &$data, $subject = '')
	{
		$this->load->library('email');
		$this->email->from($this->config->item('webmaster_email', 'user_auth'), $this->config->item('site_name', 'user_auth'));
		$this->email->reply_to($this->config->item('webmaster_email', 'user_auth'), $this->config->item('site_name', 'user_auth'));
		$this->email->set_mailtype("html");
		$this->email->to($email);
		if($subject != '')
		{
			$this->email->subject($subject);
		}
		else
		{
			$this->email->subject($this->config->item('site_name', 'user_auth'));
		}		
		$this->email->message($this->load->view('email/'.$type.'-html', $data, TRUE));		
		$this->email->set_alt_message($this->load->view('email/'.$type.'-txt', $data, TRUE));
		$this->email->send();
	}
	
	/**
	* Function to activate user/shelter account
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function activate_account($data) 
	{
		if($this->check_activation_code($data['activationCode']))
		{
			$fields['isActive'] = 1;
			$this->db->where('accountActivationCode', $data['activationCode']);
			$res_ins = $this->db->update($this->user_table_name, $fields);
			if($res_ins)
			{				
				$sql_chk = "";
				$sql_chk = "SELECT userId,groupId FROM ".$this->user_table_name." WHERE accountActivationCode = '".$data['activationCode']."'";
				$res_chk = $this->db->query($sql_chk);
				if($res_chk->row()->groupId == 3){
					$result['message'] = "Your account activated successfully, ready to approve by admin.";
					$result['status'] = 203;
				}else{
					$param['userId'] = $res_chk->row()->userId;
					$result['userInfo'] = $this->get_user_detail($param);
					$this->load->model('Pet_model');
					$result['petInfo'] = $this->Pet_model->get_user_pets($param);
					foreach($result['petInfo'] as $key=>$value){
						$value->petImage = base_url().$value->petImage;
						$value->petImageThumb = base_url().$value->petImageThumb;
					}
					$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;		
					$result['message'] = "Your account activated successfully.";
					$result['status'] = 200;
				}				
			}
			else
			{
				$result['message'] = "There is something wrong, try after sometime.";
				$result['status'] = 202;
			}
		}
		else
		{
			$result['message'] = "Activation Code does not exist.";
			$result['status'] = 202;
		}		
		return $result;
    }
	
	/**
	* Function to get userid from usertoken
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_user_id($userToken) 
	{
		$this->db->select("{$this->user_table_name}.userId");
		$this->db->where('userToken', $userToken);
		$result = $this->db->get($this->user_table_name);
		$userId = $result->row()->userId;
		return $userId;
    }
	
	/**
	* Function to get userid from screen name
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_user_id_by_screenName($screenName) 
	{
		$userId = '';
		$this->db->select("{$this->user_table_name}.userId");
		$this->db->where('screenName', $screenName);
		$result = $this->db->get($this->user_table_name);
		if($result->num_rows()>0){
		$userId = $result->row()->userId;
		}
		return $userId;
    }
	
	/**
	* Function to get email from user id
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_email_by_user_id($userId) 
	{
		$emailId = '';
		$this->db->select("{$this->user_table_name}.emailId");
		$this->db->where('userId', $userId);
		$result = $this->db->get($this->user_table_name);
		if($result->num_rows()>0){
		$emailId = $result->row()->emailId;
		}
		return $emailId;
    }
	
	/**
	* Function to check social id (facebook/twitter) and return userinfo and petinfo
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function check_facebook_twitter_token($data) 
	{
		$flag = FALSE;
		if(!empty($data['type']) && $data['type'] == 'facebook'){
			$this->db->where('facebookId', $data['socialId']);
			if($this->db->count_all_results($this->user_table_name) > 0){
				$flag = TRUE;
			}
		}else if(!empty($data['type']) && $data['type'] == 'twitter'){
			$this->db->where('twitterId', $data['socialId']);
			if($this->db->count_all_results($this->user_table_name) > 0){
				$flag = TRUE;
			}
		}
		
		if($flag){
			//get and send all pet information here .ks
			$whereCondition = "";
			if($data['type'] == 'facebook'){
				$whereCondition = " WHERE facebookId = '".$data['socialId']."' and deleted=0";
			}elseif($data['type'] == 'twitter'){
				$whereCondition = " WHERE twitterId = '".$data['socialId']."' and deleted=0";
			}
			$sql_chk_username = "SELECT userId,isActive,accountActivationCode FROM ".$this->user_table_name.$whereCondition ;
			$res_chk_username = $this->db->query($sql_chk_username);
			if($res_chk_username->num_rows() > 0)
			{
				if($res_chk_username->row()->isActive == 1)
				{
					$param['userId'] = $res_chk_username->row()->userId;
					$result['userInfo'] = $this->get_user_detail($param);
					$this->load->model('Pet_model');
					$result['petInfo'] = $this->Pet_model->get_user_pets($param);
					foreach($result['petInfo'] as $key=>$value){
						$value->petImage = base_url().$value->petImage;
						$value->petImageThumb = base_url().$value->petImageThumb;
					}
					$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;$updateTime = date('Y-m-d H:i:s');
					$sql_chk = "update ".$this->user_table_name." set lastLogin='".$updateTime."' WHERE userId = '".$param['userId']."'";
					$this->db->query($sql_chk);
					if(isset($data['deviceType']) && $data['deviceType']!=''){
						$deviceType	 =$data['deviceType'];
						$deviceToken = $data['deviceToken'];
						$this->set_device_token($param['userId'], $deviceType, $deviceToken);
					}							
					$result['message'] = "success";
					$result['status'] = 200;
				}
				else
				{
					$result['activationCode'] = $res_chk_username->row()->accountActivationCode;
					$result['message'] = "Your account is not active.";
					$result['status'] = 201;
				}
			}else{
				$result['message'] = "Your account is deleted.";
				$result['status'] = 202;
			}
			
		}else{
			$result['message'] = "user not exist.";
			$result['status'] = 202;
		}
		return $result;
    }
	
	/**
	* Function to user login and return userinfo and petinfo
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function user_login($data)
	{
		$emailId	 =$data['emailId'];
		$password	 = md5($data['password']);		
		
		$sql_chk = "SELECT userToken,screenName,isActive,deleted,accountActivationCode,isBlocked FROM ".$this->user_table_name." WHERE emailId = '$emailId' AND password = '$password' and groupId='2'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() == 0){
			$result['message'] = "Email or password is wrong.";
			$result['status'] = 202;
		}else if($res_chk->row()->isActive == 0){
			$result['activationCode'] = $res_chk->row()->accountActivationCode;
			$result['message'] = "Your account is not active.";
			$result['status'] = 201;
		}else if($res_chk->row()->deleted == 1){
			$result['message'] = "Your account has been deleted.";
			$result['status'] = 201;
		}else if($res_chk->row()->isBlocked == 1){
			$result['message'] = "Your account has been blocked ";
			$result['status'] = 201;
		}else{			
			$row_chk = $res_chk->result();				
			$param['userToken'] = $row_chk[0]->userToken;
			$param['userId'] = $this->get_user_id($param['userToken']);
			$result['userInfo'] = $this->get_user_detail($param);
			$this->load->model('Pet_model');
			$result['petInfo'] = $this->Pet_model->get_user_pets($param);
			foreach($result['petInfo'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}			
			$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;
			$updateTime = date('Y-m-d H:i:s');
			$sql_chk = "update ".$this->user_table_name." set lastLogin='".$updateTime."' WHERE userId = '".$param['userId']."'";
			$this->db->query($sql_chk);
			if(isset($data['deviceType']) && $data['deviceType']!=''){
				$deviceType	 =$data['deviceType'];
				$deviceToken =$data['deviceToken'];
				$this->set_device_token($param['userId'], $deviceType, $deviceToken);
			}
			$result['status'] = 200;
		}
		return $result;
	}
	
	/**
	* Function to get single user detail when login
	*
	* @author	KS
	* @param	array
	* @return	object row
	*/
	public function get_user_detail($param)
	{
		$this->db->select("{$this->user_table_name}.userToken,{$this->user_table_name}.userId,emailId,profileImage,screenName,aboutMe,shippingAddress,userAddress,userStreet,userCity,userState,userCountry,userZipcode,userWebLink,{$this->user_setting_table}.starNotification,hashtagNotification,messageNotification,followNotification");	
		$this->db->join($this->user_setting_table,"{$this->user_setting_table}.userId = .". $this->user_table_name.'.userId');		
		$this->db->where("{$this->user_table_name}.isActive",1);
		$this->db->where("{$this->user_table_name}.userId",$param['userId']);
		$response = $this->db->get($this->user_table_name);
		return $response->row();
	}
	
	/**
	* Function to get single user detail and send userid when viewing another user profile
	*
	* @author	KS
	* @param	array
	* @return	object row
	*/
	public function get_user_detail2($param)
	{
		$this->db->select("{$this->user_table_name}.userId,emailId,profileImage,screenName,aboutMe,shippingAddress,userAddress,userStreet,userCity,userState,userCountry,userZipcode,userWebLink,{$this->user_setting_table}.starNotification,hashtagNotification,messageNotification,followNotification");	
		$this->db->join($this->user_setting_table,"{$this->user_setting_table}.userId = .". $this->user_table_name.'.userId');		
		$this->db->where("{$this->user_table_name}.isActive",1);
		$this->db->where("{$this->user_table_name}.userId",$param['userId']);
		$response = $this->db->get($this->user_table_name);
		return $response->row();
	}
	
	/**
	* Function to get device token information using userid
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_deviceinfo_by_userid($param)
	{
		$sql_sel = "";
		$sql_sel = "SELECT * FROM ".$this->user_device_table." WHERE userId='".$param['userId']."' order by udId desc";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->num_rows() != 0){
			$result = $res_chk->row();
		}else{
			$result = array();
		}			
		return $result;
	}
	
	/**
	* Function to list user follower
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function user_follower($param)
	{
		// if(isset($param['page_index']) && isset($param['page_size'])) {
			// $page = $param['page_index']*$param['page_size'];
			// $pageSize = $param['page_size'];	
		// } else {
			// $page = 0;get_user_detail
			// $pageSize = 20;	
		// }
		
		// if(isset($param['text_search'])) {
			// $this->db->like("{$this->user_table_name}.screenName", $param['text_search'],'after');	
		// }
		
		// $this->db->limit($pageSize, $page);
		//$this->db->select("{$this->user_table_name}.userId,emailId,screenName,aboutMe,userWebLink,{$this->pet_table}.petId,petName,petScreenName,petImage,petImageThumb,{$this->pet_table}.isActive as petActive");
		$this->db->select("{$this->user_table_name}.userId,screenName");		
		$this->db->join($this->user_table_name,"{$this->user_table_name}.userId = .". $this->follower_table.'.followingId');
		//$this->db->join($this->pet_table,"{$this->pet_table}.userId = .". $this->user_table_name.'.userId');	
		//$this->db->where("{$this->pet_table}.isActive",1);		
		$this->db->where("{$this->user_table_name}.isActive",1);
		$this->db->where("{$this->user_table_name}.deleted",0);
		$this->db->where("{$this->user_table_name}.isBlocked",0);
		$this->db->where("{$this->follower_table}.followerId",$param['userId']);
		$response = $this->db->get($this->follower_table);
		if($response->num_rows()>0){
			$result['userList'] = $response->result();
			// foreach($result['userList'] as $key=>$value){
				// $value->petImage = base_url().$value->petImage;
				// $value->petImageThumb = base_url().$value->petImageThumb;
			// }
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No user found.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to check and set device token
	*
	* @author	KS
	* @param	userid, devicetype, devicetoken
	* @return	none
	*/
	public function set_device_token($userId, $deviceType, $deviceToken)
	{
		// sql to check the entry userId in device table
		$sql_chk = "SELECT * FROM ".$this->user_device_table." WHERE userId='$userId' and deviceToken='$deviceToken'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
			//update the deviceToken
			$sql_upd = "UPDATE ".$this->user_device_table." SET deviceType='$deviceType',deviceToken='$deviceToken' WHERE userId='$userId'";
			$res_upd = $this->db->query($sql_upd);
		}else{
			//insert the deviceToken
			$sql_ins = "INSERT INTO ".$this->user_device_table." SET deviceType='$deviceType',deviceToken='$deviceToken',userId='$userId'";			
			$res_ins = $this->db->query($sql_ins);
		}
	}

	/**
	* Function to update activation code to users table
	*
	* @author	KS
	* @param	emailId, activation_code
	* @return	none
	*/
	public function update_activation_code($emailId, $activation_code)
	{
		$sql_ins = "update ".$this->user_table_name." SET accountActivationCode='$activation_code'  where emailId='$emailId' and deleted=0";			
		$res_ins = $this->db->query($sql_ins);		
	}
	
	/**
	* Function to check and set user location latitude and longitude
	*
	* @author	KS
	* @param	userId, userLatitute, userLongitude
	* @return	none
	*/
	public function set_user_location($userId, $userLatitute, $userLongitude)
	{
		$sql_chk = "SELECT * FROM ".$this->user_location_table." WHERE userId='$userId'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
			//update the deviceToken
	        $sql_upd = "UPDATE ".$this->user_location_table." SET userLatitute='$userLatitute',userLongitude='$userLongitude' WHERE userId='$userId'";
			$res = $this->db->query($sql_upd);
		}else{
			//insert the deviceToken
			$sql_ins = "INSERT INTO ".$this->user_location_table." SET userLatitute='$userLatitute',userLongitude='$userLongitude',userId='$userId'";			
			$res = $this->db->query($sql_ins);
		}
		
		if($res){
			$result['message'] = "Location saved.";
			$result['status'] = 200;
		}else{
			$result['message'] = "Unable to save location.";
			$result['status'] = 202;
		}
		return $result;
	}

	/**
	* Function to get user location latitude and longitude
	*
	* @author	KS
	* @param	userId, userLatitute, userLongitude
	* @return	none
	*/
	public function get_user_location($userId)
	{
		$userLocation = array();
		$sql_chk = "SELECT userLatitute,userLongitude FROM ".$this->user_location_table." WHERE userId='".$userId."'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
			$userLocation = $res_chk->row();
		}
		return $userLocation;
	}
	
	/**
	* Function to check reset password token with 24 hours validation
	*
	* @author	KS
	* @param	variable,variable
	* @return	array
	*/
	public function check_reset_password_token($userTokenKey,$resetTokenKey)
	{

		$sql_chk = "";
		$sql_chk = "SELECT resetPasswordTokenTime FROM ".$this->user_table_name." WHERE userToken = '$userTokenKey' and resetPasswordToken='$resetTokenKey'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
			$timestamp = strtotime($res_chk->row()->resetPasswordTokenTime);			
			if(getHours($timestamp) <= 24){
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "Reset password token is invalid, try again.";
				$result['status'] = 202;
			}			
		}else{				
			$result['message'] = "Reset password token does not exist.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to retrieve change password link on email
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function forget_password($data)
	{

		$emailId = $data['emailId'];

		//query to check the email in DB
		
		$sql_chk = "SELECT userToken,screenName FROM ".$this->user_table_name." WHERE emailId = '$emailId'";
		$res_chk = $this->db->query($sql_chk);
		
		if($res_chk->num_rows() == 0){
			//echo 'Email does not Exist.';
			$result['message'] = "Email does not Exist.";
			$result['status'] = 202;
		
		}else{	
			$data['screenName'] = $res_chk->row()->screenName;		
			$data['userToken'] = $res_chk->row()->userToken;
			$data['resettoken'] = randomToken(16, false, true, false);
			$data['site_name'] = $this->config->item('site_name', 'user_auth');
			$this->_send_email('forgot-password', $emailId, $data);
			$this->update_resetpassword_token($emailId, $data['resettoken']);
			//echo $this->db->last_query();
			$result['message'] = "Email sent successfully.";
			$result['status'] = 200;
		}
		return $result;
	}
	
	/**
	* Function to update reset password token to users table
	*=======
	* @author	KS
	* @param	emailId, token
	* @return	none
	*/
	public function update_resetpassword_token($emailId, $resettoken)
	{
		$time = date('Y-m-d h:i:s');
		$sql_ins = "update ".$this->user_table_name." SET resetPasswordToken='$resettoken',resetPasswordTokenTime='$time'  where emailId='$emailId'";			
		$res_ins = $this->db->query($sql_ins);		
	}
	
	/**
	* Function to logout from user account
	*
	* @author	KS
	* @param	userId, deviceToken
	* @return	array
	*/
	public function logout($data)
	{
		$this->db->where('userId', $data['userId']);
		$this->db->where('deviceToken', $data['deviceToken']);
		$this->db->delete($this->user_device_table);
		
		if($this->db->affected_rows() > 0)
		{
			$result['message'] = "User logged out successfully.";
			$result['status'] = 200;
		}
		else
		{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;
	}	

	/**
	* Function to Reset password by email link
	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/
	public function Reset_password($data)
	{
		$password	= md5($data['password']);
		
                $fields['password'] = $password;
		$this->db->where('userToken', $data['userTokenKey']);
		$this->db->where('resetPasswordToken', $data['resetTokenKey']);
		$rslt = $this->db->update($this->user_table_name, $fields);
		if($rslt){
			$result['message'] = "Password changed successfully.";
			$result['status'] = 200;
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}
		return $result;	    
	}
	/**
	* Function to LISTING
	*
	* @author	Shashank
	* @param	var,var,var
	* @return	array
	*/
   public function all_users($limit, $start, $searchStr =NULL)
	{	 
	   
		if(isset($searchStr) && $searchStr != '' && $searchStr != NULL){
			$this->db->like('screenName', $searchStr,'after');
			$this->db->or_like('emailId', $searchStr,'after');
		}
		if($start!=0){
			$start = (($start-1) * $limit);
		}
		$this->db->limit($limit, $start);
		$this->db->order_by("userCreateTime", "desc");
        $this->db->where('groupId != 1');
		$this->db->where('groupId != 3');
		$query = $this->db->get($this->user_table_name);
		//echo $this->db->last_query();
		return $query->result_array();
	}
	
	/**
	* Function to Counting the number of records
	*
	* @author	Shashank
	* @param	var
	* @return	array
	*/
	
	public function record_count($searchStr = NULL) {
		if(isset($searchStr) && ($searchStr != '')){
			$this->db->like('screenName', $searchStr,'after');
			$this->db->or_like('emailId', $searchStr,'after');
		}

		$this->db->from($this->user_table_name);
        $this->db->where('groupId != 1');
		$this->db->where('groupId != 3');
		$count = $this->db->count_all_results();
		//pr($count);
		return $count;
       
    }
	
	/**
	* Function to LISTING
	*
	* @author	Shashank
	* @param	var,var,var
	* @return	array
	*/
   public function all_shelter_users($limit, $start, $searchStr =NULL)
	{	 
	   
		if(isset($searchStr) && $searchStr != '' && $searchStr != NULL){
			$this->db->like('screenName', $searchStr,'after');
			$this->db->or_like('emailId', $searchStr,'after');
		}
		if($start!=0){
			$start = (($start-1) * $limit);
		}
		$this->db->limit($limit, $start);
		$this->db->order_by("userCreateTime", "desc");
        $this->db->where('groupId != 1');
		$this->db->where('groupId != 2');
		$query = $this->db->get($this->user_table_name);
		//echo $this->db->last_query();
		return $query->result_array();
	}
	
	/**
	* Function to Counting the number of records
	*
	* @author	Shashank
	* @param	var
	* @return	array
	*/
	
	public function shelter_record_count($searchStr = NULL) {
		if(isset($searchStr) && ($searchStr != '')){
			$this->db->like('screenName', $searchStr,'after');
			$this->db->or_like('emailId', $searchStr,'after');
		}

		$this->db->from($this->user_table_name);
        $this->db->where('groupId != 1');
		$this->db->where('groupId != 2');
		$count = $this->db->count_all_results();
		//pr($count);
		//echo $this->db->last_query();
		return $count;
       
    }
	
	/**
	* Function to Lonin web
	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/
	public function user_login_web($data)
	{
		$emailId	= $data['emailId'];
		$password	= md5($data['password']);
		
		
		$sql_chk = "SELECT * FROM ".$this->user_table_name." WHERE emailId = '$emailId' AND password = '$password'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() == 0){
			$result['message'] = "User does not exists.";
			$result['status'] = 202;
		}else if($res_chk->row()->isActive == 0){
			$result['message'] = "Your account is not active.";
			$result['status'] = 202;
		}else if($res_chk->row()->groupId == 2){
            $result['message'] = "Unauthorised user";
			$result['status'] = 202;
		}	
		else if($res_chk->row()->isApproved == 0){
            $result['message'] = "Your account is not Approved";
			$result['status'] = 202;
		} else if($res_chk->row()->isBlocked == 1){
            $result['message'] = "Your account is Blocked";
			$result['status'] = 202;
		} else {
			$row_chk = $res_chk->result();
			unset($row_chk[0]->password);
			$userId = $row_chk[0]->userId;
			$row_chk[0]->profileImage = base_url().$row_chk[0]->profileImage;
			$result['userInfo'] = $row_chk[0];
			$result['status'] = 200;
		}
		
		return $result;
	}
    /**
	 * Update user login info, such login time, and
	 * @author	Shashank
	 * @param	var
	 * 
	 * @return	void
	 */
	public function update_login_info($user_id)
	{
		$this->db->set('lastLogin', date('Y-m-d H:i:s'));
		$this->db->where('userId', $user_id);
		$this->db->update($this->user_table_name);
	}
	
	/**
	* Function to list all users
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_all_users($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		
		
		$this->db->limit($pageSize, $page);
		$this->db->order_by("{$this->user_table_name}.screenName", "asc");
		$this->db->select("{$this->user_table_name}.userId,screenName,aboutMe,userWebLink,fullName,{$this->user_location_table}.userLatitute,{$this->user_location_table}.userLongitude,{$this->pet_table}.petId,petName,petScreenName,petImage,petImageThumb,{$this->pet_table}.isActive as petActive,{$this->pet_type_table}.petType");	
		if(isset($param['action']) && $param['action']=='findFriend') {
		$this->db->select("((ACOS( SIN( ".$param['userLatitude']." * PI( ) /180 ) * SIN( {$this->user_location_table}.userLatitute * PI( ) /180 ) + COS( ".$param['userLatitude']." * PI( ) /180 ) * COS( {$this->user_location_table}.userLatitute * PI( ) /180 ) * COS(( ".$param['userLongitude']." - {$this->user_location_table}.userLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) AS distance");
		}
		$this->db->join($this->user_location_table,"{$this->user_location_table}.userId = .". $this->user_table_name.'.userId','left');	
		$this->db->join($this->pet_table,"{$this->pet_table}.userId = .". $this->user_table_name.'.userId');
		$this->db->join($this->pet_type_table,"{$this->pet_type_table}.petTypeId = .". $this->pet_table.'.petTypeId');		
		$this->db->where("{$this->pet_table}.isActive",1);		
		$this->db->where("{$this->user_table_name}.isActive",1);
		$this->db->where("{$this->user_table_name}.deleted",0);
		$this->db->where("{$this->user_table_name}.groupId",2);
		$this->db->where("{$this->user_table_name}.isBlocked",0);
		$this->db->where("{$this->user_table_name}.userId !=",$param['userId']);
		if(isset($param['text_search'])) 
		{
		//$this->db->group_start(); CI 3.0 should support group query
		$this->db->like("{$this->user_table_name}.fullname", $param['text_search'], 'both');
		
		/*
		This or like query should be in group query otherwise it impact whole query due to 'or' operation after 'and'. 
		$this->db->or_like("{$this->user_table_name}.screenName", $param['text_search'], 'after');		
		$this->db->group_end();
		*/
		}
		$response = $this->db->get($this->user_table_name);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['userList'] = $response->result();
			foreach($result['userList'] as $key=>$value){
				$param['userId2'] = $value->userId;
				$followResult = $this->check_user_isfollowed($param);
				if($followResult['status']==200){
					$value->isFollowed = 1;
				}else{
					$value->isFollowed = 0;
				}
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
				if(empty($value->userLatitute)){
					$value->userLatitute = '';
				}
				if(empty($value->userLongitude)){
					$value->userLongitude = '';
				}
				if(isset($param['action']) && $param['action']=='findFriend') {
					if(empty($value->distance)){
						$value->distance = '';
					}
				}
			}
			
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No user found.";
			$result['status'] = 202;
		}
		
		return $result;	
	}

	
    /**
	 * Update user status
	 * @author	Shashank
	 * @param var,var
	 * @return	void
	 */	
	function status_update($id,$data)
    {   
		$this->db->where('userId', $id);
		
		$this->db->update($this->user_table_name, $data);
		
    }

	
	/**

	* Function to shelters/charities and stores listing

	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/
	public function get_all_nearby_shelters_and_stores($param)
	{
		$this->db->order_by("{$this->user_table_name}.screenName", "asc");
		$this->db->select("{$this->user_table_name}.userId,profileImage,screenName,aboutMe,userWebLink,{$this->user_location_table}.userLatitute,userLongitude");
		$this->db->select("((ACOS( SIN( ".$param['userLatitude']." * PI( ) /180 ) * SIN( userLatitute * PI( ) /180 ) + COS( ".$param['userLatitude']." * PI( ) /180 ) * COS( userLatitute * PI( ) /180 ) * COS(( ".$param['userLongitude']." - userLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) AS distance");		
		$this->db->join($this->user_location_table,"{$this->user_location_table}.userId = .". $this->user_table_name.'.userId','left');		
		$this->db->where("{$this->user_table_name}.isActive",1);
		//$this->db->where("{$this->user_table_name}.isApproved",1);
		$this->db->where("{$this->user_table_name}.deleted",0);
		$this->db->where("{$this->user_table_name}.groupId",2);
		$this->db->where("{$this->user_table_name}.isBlocked",0);
		$this->db->having("distance <=",10);
		$this->db->where("{$this->user_table_name}.userId !=",$param['userId']);
		$response = $this->db->get($this->user_table_name);
		//echo $this->db->last_query();
		if($response->num_rows()>0){
			$result['userList'] = $response->result();
			foreach($result['userList'] as $key=>$value){
				$value->profileImage = base_url().$value->profileImage;
				if(empty($value->userLatitute)){
					$value->userLatitute = '';
				}
				if(empty($value->userLongitude)){
					$value->userLongitude = '';
				}
			}
		}else{
			$result['userList'] = array();
		}
		
		$storeList = $this->get_nearby_stores($param);
		
		if(count($storeList)>0){
			$result['storeList'] = $storeList;
		}else{
			$result['storeList'] = array();
		}
		$parkList =	$this->get_nearby_parks($param);
		if(count($parkList)>0){
			$result['parkList'] = $parkList;
		}else{
			$result['parkList'] = array();
		}
		if(count($storeList)>0 || count($result['userList'])>0 ||count($parkList)>0){	
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No data found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	
	/**
	* Function to get all stores
	*
	* @author	KS
	* @param	array
	* @return	object array
	*/
	public function get_nearby_stores($param)
	{
		$this->db->order_by("{$this->store_table}.storeName", "asc");
		$this->db->where("{$this->store_table}.status",1);
		$this->db->where("{$this->store_table}.deleted",0);
		$this->db->having("distance <=",10);
		$this->db->select("{$this->store_table}.*");
		$this->db->select("((ACOS( SIN( ".$param['userLatitude']." * PI( ) /180 ) * SIN( storeLatitude * PI( ) /180 ) + COS( ".$param['userLatitude']." * PI( ) /180 ) * COS( storeLatitude * PI( ) /180 ) * COS(( ".$param['userLongitude']." - storeLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) AS distance");		
		$response = $this->db->get($this->store_table);
		$result = $response->result();
		foreach($result as $key=>$value){
				$value->storeImage = base_url().$value->storeImage;
				$value->storeImageThumb = base_url().$value->storeImageThumb;
			}
			return $result;
	}	
	
	
	/**
	* Function to get all parks
	*
	* @author	shashank
	* @param	array
	* @return	object array
	*/
	public function get_nearby_parks($param)
	{
		$this->db->order_by("{$this->park_table}.parkName", "asc");
		$this->db->where("{$this->park_table}.deleted",0);
		$this->db->having("distance <=",10);
		$this->db->select("{$this->park_table}.*");
		$this->db->select("((ACOS( SIN( ".$param['userLatitude']." * PI( ) /180 ) * SIN( parkLatitude * PI( ) /180 ) + COS( ".$param['userLatitude']." * PI( ) /180 ) * COS( parkLatitude * PI( ) /180 ) * COS(( ".$param['userLongitude']." - parkLongitude ) * PI( ) /180 ) ) *180 / PI( )) *60 * 1.1515) AS distance");		
		$response = $this->db->get($this->park_table);
		return $response->result();
	}	
	/**
	* Function to check logged user follow other user or not
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
    public function check_user_isfollowed($param) 
	{
		$this->db->where('followerId', $param['userId2']);
		$this->db->where('followingId', $param['userId']);
		if($this->db->count_all_results($this->follower_table) > 0){
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No user found.";
			$result['status'] = 202;
		}
		return $result;
    }
	
	/**
	* Function to get user profile with pet info
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function user_profile($param)
	{
		$userData = $this->get_user_detail2($param);		
		if(!empty($userData)){
			$result['userInfo'] = $userData;			
			$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;			
			$this->load->model('Pet_model');
			$result['petInfo'] = $this->Pet_model->get_user_pets($param);
			foreach($result['petInfo'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "No data found.";
			$result['status'] = 202;
		}
		return $result;	
	}
	
	/**
	* Function to follow and following
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function follow_following($param)
	{
		$sql_chk = "SELECT * FROM ".$this->follower_table." WHERE followerId='".$param['userId']."' and followingId='".$param['loggedUserId']."'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
			$this->db->where('followerId', $param['userId']);
			$this->db->where('followingId', $param['loggedUserId']);
			$res = $this->db->delete($this->follower_table);
			if($res){
				$result['message'] = "Un-Follow Successful.";
				$result['isFollowed'] = 0;
				$result['status'] = 200;
			}else{
				$result['message'] = "Unable to following.";
				$result['status'] = 202;
			}
		}else{
			$sql_ins = "INSERT INTO ".$this->follower_table." SET followerId='".$param['userId']."',followingId='".$param['loggedUserId']."',followerCreateTime='".date('Y-m-d H:i:s')."'";			
			$res = $this->db->query($sql_ins);			
			if($res)
			{
				$last_insert_follower_id = $this->db->insert_id();
				//send notification
				if($param['loggedUserId'] != $param['userId'])
				{
					$fields = array();
					$userResults = array();
					$this->load->model('Pet_model');				
					$fields['userId'] = $param['loggedUserId'];			
					$userResults = $this->get_user_detail($fields);
					$activePetInfo = $this->Pet_model->get_active_pet_detail($fields);
					$param['notifiedByUserName'] = $userResults->screenName;
					$param['notificationText'] = 'started following you';
					$sql_ins = "";
					$sql_ins = "INSERT INTO ".$this->notification_table." SET objectId='".$last_insert_follower_id."',userId='".$param['userId']."',notifiedByUserId='".$param['loggedUserId']."',notifiedByPetId='".$activePetInfo->petId."',notificationType='4',notifiedByUserName='".$param['notifiedByUserName']."',notifiedByPetScreenName='".$activePetInfo->petScreenName."',notifiedByPetName='".$activePetInfo->petName."',notificationText='".$param['notificationText']."',notifyCreateTime='".date('Y-m-d H:i:s')."'";			
					$res2 = $this->db->query($sql_ins);
					$badgeResult = $this->User_model->add_user_badge($param);
					//--------------send ios push notification-------------------
					$userDetail = $this->User_model->get_user_detail($param);
					if($userDetail->followNotification)
					{					
						$fields = array();
						$sendNotificationParam = array();
						$fields['userId'] = $param['userId'];
						$deviceResult = $this->User_model->get_deviceinfo_by_userid($fields);
						//pr($deviceResult);die;
						if(!empty($deviceResult->deviceToken))
						{
							if(strtolower($deviceResult->deviceType) == 'ios')
							{
								$sendNotificationParam['badgeCount'] = $this->User_model->get_user_badge_count($fields);
								$sendNotificationParam['deviceToken'] = $deviceResult->deviceToken;
								$sendNotificationParam['message'] = $activePetInfo->petName." ".$param['notificationText'];
								$sendNotificationParam['senderId'] = $param['loggedUserId'];
								$sendNotificationParam['senderPetId'] = $activePetInfo->petId;
								$sendNotificationParam['notificationType'] = 4;
								push_notification_ios($sendNotificationParam);
							}
						}
					}
					//--------------send ios push notification end-------------------
				}
					
					
				//-----------------
				$result['isFollowed'] = 1;
				$result['message'] = "Follow successful.";
				$result['status'] = 200;
			}else{
				$result['message'] = "Unable to follow.";
				$result['status'] = 202;
			}
		}		
		return $result;
	}

	/**
	* Function to change the password of user
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function change_password_api($data)
	{
		$userId		= $data['userId'];
		$password	= md5($data['password']);
		$oldPassword = md5($data['oldPassword']);
		
		// query to get the oldpassword
		$sql_sel = "SELECT password FROM ".$this->user_table_name." WHERE userId='$userId'";
		$res_sel = mysql_query($sql_sel);
		$row_sel = mysql_fetch_assoc($res_sel);
		$op = $row_sel['password'];
		if($oldPassword == $op){
			//query to update the user password
			$sql_upd = "UPDATE ".$this->user_table_name." SET password='$password' WHERE userId='$userId'";
			$res_upd = mysql_query($sql_upd);
			if($res_upd){
				$result['message'] = "Password change successfully.";
				$result['status'] = 200;
			}else{
				$result['message'] = "Unable to change password.";
				$result['status'] = 202;
			}
		}else{
			$result['message'] = "Old password did not match.";
			$result['status'] = 202;
		}		
		return $result;
	}
    
	/**
	* Function to update user badge count
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function add_user_badge($data)
	{
		$sql_sel = "";
		$sql_sel = "SELECT * FROM ".$this->user_badge_table." WHERE userId='".$data['userId']."'";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->num_rows() == 0){
			$sql_sel = "";
			$sql_sel = "INSERT INTO ".$this->user_badge_table." SET badgeCount='0',userId='".$data['userId']."'";			
			$res = $this->db->query($sql_sel);			
		}
		
		$sql_sel = "";
	    $sql_sel = "UPDATE ".$this->user_badge_table." SET badgeCount=badgeCount+1 WHERE userId='".$data['userId']."'";
		$res = $this->db->query($sql_sel);		
		return $res;
	}

    /**
	* Function to get user badge count
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function get_user_badge_count($data)
	{
		$sql_sel = "";
		$sql_sel = "SELECT badgeCount FROM ".$this->user_badge_table." WHERE userId='".$data['userId']."'";
		$res_chk = $this->db->query($sql_sel);
		if($res_chk->num_rows() != 0){
			$badgeCount = $res_chk->row()->badgeCount;
		}else{
			$badgeCount = 0;
		}			
		return $badgeCount;
	}

    /**
	* Function to message account listing i.e. messages given by user's pet account
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function message_account_listing($param)
	{	
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		$sql = "";
		// $sql = "SELECT * from (SELECT messages.*,pets.petName,petScreenName,petImage,petImageThumb FROM messages join pets on(pets.petId=messages.petId) where (messages.userId='".$param['userId']."' or messages.senderId='".$param['userId']."') ORDER BY messages.messageCreateTime DESC) A group by senderPetId ORDER BY messageId DESC";
		// $sql = "SELECT messages.*,pets.petName,petScreenName,petImage,petImageThumb FROM messages join pets on(pets.petId=messages.petId) where (messages.userId='".$param['userId']."' or messages.senderId='".$param['userId']."') group by userId,petId
		// union
		// SELECT messages.*,pets.petName,petScreenName,petImage,petImageThumb FROM messages join pets on(pets.petId=messages.petId) where (messages.userId='".$param['userId']."' or messages.senderId='".$param['userId']."') group by senderId,senderPetId
		// ORDER BY messageCreateTime DESC";
		$sql = "SELECT * FROM messages
				JOIN (
					SELECT MAX(messageId) AS messageId
					FROM messages
					WHERE ".$param['userId']." IN (userId, senderId)
					GROUP BY IF(userId = ".$param['userId'].", senderId, userId),if(petId!=senderPetId,petId,senderPetId)
				) AS last_message USING (messageId) ORDER BY messageId DESC";
		$response = $this->db->query($sql);
		//echo $this->db->last_query();
		$final_array = array();
		if($response->num_rows() > 0){
			$this->load->model('Pet_model');
			$result['messageAcccountList'] = $response->result_array();

			/* code for removing last duplicate array within result array by KS */
			$temp_array = array();
			$i = 0;
			foreach($result['messageAcccountList'] as $key=>$value)
			{
				$FLAG = FALSE;
				$temp_array = $result['messageAcccountList'][$key];
				if($i==0)
				{		
					$final_array[] = $temp_array;
				}
				else
				{
					for($j=0;$j<count($final_array);$j++)
					{			
						if(($final_array[$j]['userId']==$temp_array['userId'] && $final_array[$j]['petId']==$temp_array['petId'] && $final_array[$j]['senderId']==$temp_array['senderId'] && $final_array[$j]['senderPetId']==$temp_array['senderPetId']) || 
						($final_array[$j]['userId']==$temp_array['senderId'] && $final_array[$j]['petId']==$temp_array['senderPetId'] && $final_array[$j]['senderId']==$temp_array['userId'] && $final_array[$j]['senderPetId']==$temp_array['petId']))
						{					
							$FLAG = TRUE;				
						}			
					}		
					if($FLAG == FALSE){
						$final_array[] = $temp_array;
					}
				}
				$i++;
			}
			//print_r($final_array);			
			/* End code for removing duplicate array within result array by KS */
			$result = array();
			$result['messageAcccountList_temp'] = $final_array;
			
			$counter = 0;
			$result['messageAcccountList'] = array();
			for($page;$page<count($result['messageAcccountList_temp']);$page++)
			{
				$result['messageAcccountList'][$counter] = $result['messageAcccountList_temp'][$page];
				$receiverPetDetail = array();
				$receiverPetDetail = $this->Pet_model->pet_detail($result['messageAcccountList_temp'][$page]['petId']);
				$result['messageAcccountList'][$counter]['petName'] = $receiverPetDetail[0]['petName'];
				$result['messageAcccountList'][$counter]['petImage'] = base_url().$receiverPetDetail[0]['petImage'];
				$result['messageAcccountList'][$counter]['petImageThumb'] = base_url().$receiverPetDetail[0]['petImageThumb'];
				
				$senderPetDetail = array();
				$senderPetDetail = $this->Pet_model->pet_detail($result['messageAcccountList_temp'][$page]['senderPetId']);
				$result['messageAcccountList'][$counter]['senderPetName'] = $senderPetDetail[0]['petName'];
				$result['messageAcccountList'][$counter]['senderPetImage'] = base_url().$senderPetDetail[0]['petImage'];
				$result['messageAcccountList'][$counter]['senderPetImageThumb'] = base_url().$senderPetDetail[0]['petImageThumb'];
				$result['messageAcccountList'][$counter]['createTimeString'] = time_elapsed_string($result['messageAcccountList_temp'][$page]['messageCreateTime']);
				if($counter < $pageSize-1){						
				}else{
					break;
				}
				$counter++;
			}
			unset($result['messageAcccountList_temp']);
			if(count($result['messageAcccountList'])>0)
			{	
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "No message found.";
				$result['status'] = 202;
			}
		}else{
			$result['message'] = "No message found.";
			$result['status'] = 202;
		}
		return $result;	
	}



	
	/**
	* Function to update user profile
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function update_user_profile($param)
	{	
		$updateTime = date('Y-m-d H:i:s');
		$sql_upd = "";
		$sql_upd = "UPDATE ".$this->user_setting_table." SET starNotification='".$param['starNotification']."',hashtagNotification='".$param['hashtagNotification']."',messageNotification='".$param['messageNotification']."',followNotification='".$param['followNotification']."' WHERE userId='".$param['userId']."'";
		$res_upd = $this->db->query($sql_upd);
		
		// if(isset($param['userWebLink']) && !empty($param['userWebLink'])){
			// $sql_upd = "";
			// $sql_upd = "UPDATE ".$this->user_table_name." SET userWebLink='".mysql_real_escape_string($param['userWebLink'])."',userUpdateTime='".$updateTime."' WHERE userId='".$param['userId']."'";
			// $res_upd = $this->db->query($sql_upd);
		// }
		
		// if(isset($param['shippingAddress']) && !empty($param['shippingAddress'])){
			// $sql_upd = "";
			// $sql_upd = "UPDATE ".$this->user_table_name." SET shippingAddress='".mysql_real_escape_string($param['shippingAddress'])."',userUpdateTime='".$updateTime."' WHERE userId='".$param['userId']."'";
			// $res_upd = $this->db->query($sql_upd);
		// }
	
		if($res_upd){
			$fields = array();
			$fields['userAddress'] = $param['userAddress'];
			$fields['userCity']    = $param['userCity'];
			$fields['userState']   = $param['userState'];
			$fields['userZipcode'] = $param['userZipcode'];
			$fields['userUpdateTime'] = $updateTime;
			if(isset($param['userStreet']) && !empty($param['userStreet'])){
				$fields['userStreet'] = $param['userStreet'];
			}
			if(isset($param['userCountry']) && !empty($param['userCountry'])){
				$fields['userCountry'] = $param['userCountry'];
			}else{
				$fields['userCountry'] = 'US';
			}
			if(isset($param['userWebLink']) && !empty($param['userWebLink'])){
				$fields['userWebLink'] = $param['userWebLink'];
			}
			if(isset($param['shippingAddress']) && !empty($param['shippingAddress'])){
				$fields['shippingAddress'] = $param['shippingAddress'];
			}
			$this->db->where("{$this->user_table_name}.userId",$param['userId']);
			$res_ins = $this->db->update($this->user_table_name, $fields);
			
			$result['userInfo'] = $this->get_user_detail($param);
			$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;
			//$this->load->model('Pet_model');
			//$result['petInfo'] = $this->Pet_model->get_pet_profile($param);			
			$result['message'] = "success";
			$result['status'] = 200;			
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to delete user own account
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function delete_my_account($param)
	{	
		//$fields = array();
		//$fields['deleted'] = 1;
		$this->db->where("{$this->user_table_name}.userId",$param['userId']);
		$res_ins = $this->db->delete($this->user_table_name);
	
		if($res_ins){				
			$result['message'] = "success";
			$result['status'] = 200;			
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to update user pet profile
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function update_pet_profile($param)
	{	
		$updateTime = date('Y-m-d H:i:s');
		
		$sql_upd = "";

		$sql_upd = "UPDATE ".$this->pet_table." SET  petName='".($param['petName'])."',petTypeId='".$param['petTypeId']."',aboutPet='".($param['aboutPet'])."',petUpdateTime='".$updateTime."' WHERE userId='".$param['userId']."' and petId='".$param['petId']."'";

		$res_upd = $this->db->query($sql_upd);
		
		if(!empty($_FILES['petImage']['name'])){
			$target_path = PET_IMAGE_PATH;
			$target_path = $target_path .time().'_'. basename(str_replace(' ', '_', $_FILES['petImage']['name'])); 
			$img_resp = move_uploaded_file($_FILES['petImage']['tmp_name'], $target_path);
			if($img_resp){
				$target_thumb_path = PET_IMAGE_THUMB_PATH.time().str_replace(' ', '_', $_FILES['petImage']['name']);
				createThumbs($target_path,$target_thumb_path,100);
				if(file_exists($target_thumb_path)){
					$petImageThumb = $target_thumb_path;
				}else{
					$petImageThumb = PET_IMAGE_THUMB_PATH."default.png";
				}
				$petImage = $target_path;
			}else{
				$petImage = PET_IMAGE_PATH."default.png";
				$petImageThumb = PET_IMAGE_THUMB_PATH."default.png";
			}
			
			$sql_upd = "";
			$sql_upd = "UPDATE ".$this->pet_table." SET  petImage='".$petImage."',petImageThumb='".$petImageThumb."' WHERE userId='".$param['userId']."' and petId='".$param['petId']."'";
			$res_upd = $this->db->query($sql_upd);
		}
		
		if($res_upd){
			$result['userInfo'] = $this->get_user_detail($param);
			$result['userInfo']->profileImage = base_url().$result['userInfo']->profileImage;
			$this->load->model('Pet_model');
			//$result['petInfo'] = $this->Pet_model->get_pet_profile($param);		
			$result['petInfo'] = $this->Pet_model->get_user_pets($param);	
			foreach($result['petInfo'] as $key=>$value){
				$value->petImage = base_url().$value->petImage;
				$value->petImageThumb = base_url().$value->petImageThumb;
			}				
			$result['message'] = "success";
			$result['status'] = 200;			
		}else{
			$result['message'] = "There is something wrong, try after sometime.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to get userid from screen name
	*
	* @author	KS
	* @param	variable
	* @return	variable
	*/
	public function get_user_id_by_email($email) 
	{
		$this->db->select("{$this->user_table_name}.userId");
		$this->db->where('email', $email);
		$result = $this->db->get($this->user_table_name);
		if ($result->num_rows() == 1) return $result->row();
		return NULL;
    }
	/**
	* Function to change password
	*
	* @author	Shashank
	* @param	array
	* @return	array
	*/
	public function changePassword($data,$userToken)
	{
		$pass= md5($data['password1']);
		$password=md5($data['password']);
        $fields['password'] = $password;
		$sql_sel = "SELECT password FROM ".$this->user_table_name." WHERE userToken='$userToken'";
		$res_sel = mysql_query($sql_sel);
		$row_sel = mysql_fetch_assoc($res_sel);
		$op = $row_sel['password'];
		if($pass==$op)
		{
		$this->db->where('password', $pass);
		$this->db->where('userToken', $userToken);
		$rslt = $this->db->update($this->user_table_name, $fields);
		
		if($rslt){
				$result['message'] = "Password change successfully.";
				$result['status'] = 200;
			}else{
				$result['message'] = "Unable to change password.";
				$result['status'] = 202;
			}
		}else{
			$result['message'] = "Old password did not match.";
			$result['status'] = 202;
		}		
		return $result;
	}
	
	/**
	* Function to list user notifications
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function user_notification($param)
	{
		if(isset($param['page_index']) && isset($param['page_size'])) {
			$page = $param['page_index']*$param['page_size'];
			$pageSize = $param['page_size'];	
		} else {
			$page = 0;
			$pageSize = 20;	
		}
		
		// // $notificationTypeConditions = '';
		// // $userDetail = $this->get_user_detail($param);
		// // if($userDetail->starNotification){
			// // $notificationTypeConditions .= "'1',";
		// // }
		// // if($userDetail->hashtagNotification){
			// // $notificationTypeConditions .= "'2',";
		// // }
		// // if($userDetail->messageNotification){
			// // $notificationTypeConditions .= "'3',";
		// // }
		// // if($userDetail->followNotification){
			// // $notificationTypeConditions .= "'4',";
		// // }
		
		//if($notificationTypeConditions != ''){
			//$notificationTypeConditions = rtrim($notificationTypeConditions, ",");		
			$sql = "";
			//$sql = "SELECT notifications.*,pets.petImageThumb FROM notifications join pets on(pets.petId=notifications.notifiedByPetId) where notifications.userId='".$param['userId']."' and notifications.isRead='0' and notificationType in (".$notificationTypeConditions.") order by notifications.nId desc limit ".$page.",".$pageSize;
			$sql = "SELECT notifications.*,pets.petImageThumb FROM notifications join pets on(pets.petId=notifications.notifiedByPetId) where notifications.userId='".$param['userId']."' and notifications.isRead='0' order by notifications.nId desc limit ".$page.",".$pageSize;
			$response = $this->db->query($sql);
			//echo $this->db->last_query();
			if($response->num_rows() > 0){
				$result['notifications'] = $response->result();
				$this->load->model('Post_model');
				foreach($result['notifications'] as $key=>$value){				
					if($value->notificationType == 1 || $value->notificationType == 2){					
						$value->postImageThumbUrl = base_url().$this->Post_model->get_post_thumbimage($value->objectId);
					}				
					$value->petImageThumb = base_url().$value->petImageThumb;
					$value->createTimeString = time_elapsed_string($value->notifyCreateTime);
				}
				$result['badgeCount'] = $this->User_model->get_user_badge_count($param);
				$result['message'] = "success";
				$result['status'] = 200;
			}else{
				$result['message'] = "No notification found.";
				$result['status'] = 202;
			}
		// }else{
			// $result['message'] = "No notification found.";
			// $result['status'] = 202;
		// }
	    
		return $result;
	}
	
	/**
	* Function to update user badgeCount
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function update_badgecount($param)
	{
		$sql_chk = "SELECT * FROM ".$this->user_badge_table." WHERE userId='".$param['userId']."'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
	        $sql_upd = "UPDATE ".$this->user_badge_table." SET badgeCount='0' WHERE userId='".$param['userId']."'";
			$res = $this->db->query($sql_upd);
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "Unable to update badge.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to read notification
	*
	* @author	KS
	* @param	array
	* @return	array
	*/
	public function read_notification($param)
	{
		$sql_chk = "SELECT * FROM ".$this->notification_table." WHERE nId='".$param['notificationId']."'";
		$res_chk = $this->db->query($sql_chk);
		if($res_chk->num_rows() > 0){
	        $sql_upd = "UPDATE ".$this->notification_table." SET isRead='1' WHERE nId='".$param['notificationId']."'";
			$res = $this->db->query($sql_upd);
			$result['message'] = "success";
			$result['status'] = 200;
		}else{
			$result['message'] = "Unable to update notification.";
			$result['status'] = 202;
		}
		return $result;
	}
	
	/**
	* Function to shelter detail
	*
	* @author        Shashank
	* @param         var
	* @return        array
	*/
    public function shelter_detail($id)
    {        
	
        if(isset($id))
        { 
			$this->db->select("{$this->user_table_name}.userId,companyName,charityTaxId,emailId,userAddress,userCity,userCountry,userPhoneNumber,userState,userZipcode,aboutMe,contactEmail,userWebLink,{$this->user_location_table}.userLatitute,userLongitude");     
            $this->db->join($this->user_location_table,"{$this->user_location_table}.userId = .".$this->user_table_name.'.userId','left');
			$this->db->where('groupId',3); 
			$this->db->where("{$this->user_table_name}.userId",$id);                
			$response = $this->db->get($this->user_table_name);                
			//echo $this->db->last_query();
			return $response->result_array();
        }
    }
	
	
	/**
	* Function to update the store
	*
	* @author        Shashank
	* @param         array
	* @return        array
	*/
	public function update_shelter($param)
	{
		$fields = array();
			
		$fields['aboutMe'] = $param['aboutMe'];
		$fields['userAddress'] = $param['userAddress'];
		$fields['userCity'] = $param['userCity'];
		$fields['userState'] = $param['userState'];
		$fields['userPhoneNumber'] = $param['userPhoneNumber'];
		$fields['userCountry'] = $param['userCountry'];
		$fields['contactEmail'] = $param['contactEmail'];
		$fields['userZipcode'] = $param['userZipcode'];
		$fields['userWebLink'] = $param['userWebLink'];
		
		       
		$res_ins=$this->db->where('userId',$param['userId']);
		$res_ins = $this->db->update($this->user_table_name, $fields);
		if($res_ins){
				$fields = array();
				$fields['userLatitute'] = $param['userLatitude'];
				$fields['userLongitude'] = $param['userLongitude'];
				$res_ins=$this->db->where('userId',$param['userId']);
				$res_ins = $this->db->update($this->user_location_table, $fields);
				$result['message'] = "success";
				$result['status'] = 200;
		}else{
				$result['message'] = " Update failed.";
				$result['status'] = 202;
		}
		return $result;
	}
	
	
}
